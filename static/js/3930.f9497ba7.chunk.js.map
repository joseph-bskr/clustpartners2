{"version":3,"file":"static/js/3930.f9497ba7.chunk.js","mappings":"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","sources":["../../components/src/ui/media/media-body.tsx","../../components/src/ui/media/media.tsx","../../components/src/ui/media/style.tsx","../../components/src/ui/breadcrumb/style.tsx","../../components/src/ui/breadcrumb/breadcrumb.tsx","../../components/src/ui/breadcrumb/item.tsx","components/breadcrumb/style.tsx","components/breadcrumb/index.tsx","components/page-header/style.tsx","components/page-header/index.tsx","components/search-form/style.tsx","components/search-form/index.tsx","components/widgets/widget-title/style.tsx","components/widgets/widget-title/index.tsx","../../components/src/grid/container.tsx","layouts/content/style.tsx","layouts/content/index.tsx"],"sourcesContent":["import classnames from \"clsx\";\nimport { SpaceProps } from \"@doar/shared/styled\";\nimport { StyledMediaBody } from \"./style\";\n\ninterface IMediaBodyProps extends SpaceProps {\n    className?: string;\n    children: React.ReactNode;\n}\n\nconst MediaBody = ({ children, className, ...restProps }: IMediaBodyProps) => {\n    return (\n        <StyledMediaBody\n            className={classnames(className, \"media-body\")}\n            {...restProps}\n        >\n            {children}\n        </StyledMediaBody>\n    );\n};\n\nexport default MediaBody;\n","import classnames from \"clsx\";\nimport { SpaceProps, FlexboxProps, LayoutProps } from \"@doar/shared/styled\";\nimport { StyledMedia } from \"./style\";\n\ninterface IMediaProps extends SpaceProps, FlexboxProps, LayoutProps {\n    as?: React.ElementType;\n    className?: string;\n    children: React.ReactNode;\n}\n\nconst Media = ({ children, as, className, ...restProps }: IMediaProps) => {\n    return (\n        <StyledMedia\n            className={classnames(className, \"media\")}\n            as={as}\n            $el={as}\n            {...restProps}\n        >\n            {children}\n        </StyledMedia>\n    );\n};\n\nexport default Media;\n","import styled, {\n    layout,\n    space,\n    flexbox,\n    css,\n    SpaceProps,\n    LayoutProps,\n    FlexboxProps,\n} from \"@doar/shared/styled\";\n\ninterface IMedia extends SpaceProps, FlexboxProps, LayoutProps {\n    $el: string;\n}\n\nexport const StyledMedia = styled(\n    ({ m, ml, mr, mt, mb, display, alignItems, $el, ...props }) => (\n        <div {...props} />\n    )\n)<IMedia>`\n    ${({ $el }) =>\n        $el !== \"ul\" &&\n        css`\n            display: flex;\n            align-items: flex-start;\n        `}\n    ${layout};\n    ${space};\n    ${flexbox};\n`;\n\ninterface IMediaLeft extends SpaceProps, LayoutProps {}\n\nexport const StyledMediaLeft = styled(({ width, mr, ml, ...props }) => (\n    <div {...props} />\n))<IMediaLeft>`\n    ${layout};\n    ${space};\n    ${(props) =>\n        props.$alignMent === \"middle\" &&\n        css`\n            align-self: center;\n        `}\n    ${(props) =>\n        props.$alignMent === \"end\" &&\n        css`\n            align-self: flex-end;\n        `}\n    img {\n        max-width: 100%;\n    }\n`;\n\nexport const StyledMediaBody = styled(\n    ({ width, m, mr, ml, mt, mb, px, ...props }) => <div {...props} />\n)<SpaceProps>`\n    ${space};\n    flex: 1;\n`;\n","import styled, { space, css, themeGet, SpaceProps } from \"@doar/shared/styled\";\n\nexport const StyledNav = styled.nav``;\n\nexport const StyledBreadcrumb = styled(({ mr, ml, mb, mt, ...props }) => (\n    <ol {...props} />\n))<SpaceProps>`\n    display: flex;\n    flex-wrap: wrap;\n    padding: 0;\n    margin-bottom: 10px;\n    margin-top: 0;\n    list-style: none;\n    background-color: ${themeGet(\"colors.gray200\")};\n    border-radius: 0.25rem;\n    ${(props) =>\n        props.theme.name === \"dark\" &&\n        css`\n            background-color: transparent;\n        `}\n    ${space};\n`;\n\ninterface IProps {\n    $active?: boolean;\n}\n\nexport const StyledBreadcrumbItem = styled.li<IProps>`\n    ${({ $active }) =>\n        $active &&\n        css`\n            color: ${themeGet(\"colors.gray600\")};\n            ${(props) =>\n                props.theme.name === \"dark\" &&\n                css`\n                    color: ${themeGet(\"colors.primary\")};\n                `}\n        `}\n    a {\n        color: ${themeGet(\"colors.primary\")};\n        &:hover {\n            color: ${themeGet(\"colors.primary\")};\n        }\n        ${(props) =>\n            props.theme.name === \"dark\" &&\n            css`\n                color: ${themeGet(\"colors.gray600\")};\n            `}\n    }\n    &:not(:first-of-type) {\n        padding-left: 0.5rem;\n        &:before {\n            display: inline-block;\n            padding-right: 0.5rem;\n            color: ${themeGet(\"colors.gray600\")};\n            content: \"/\";\n            ${(props) =>\n                props.theme.name === \"dark\" &&\n                css`\n                    color: ${themeGet(\"colors.gray700\")};\n                    font-weight: 400;\n                `}\n        }\n    }\n`;\n","import classnames from \"clsx\";\nimport { SpaceProps } from \"@doar/shared/styled\";\nimport { StyledNav, StyledBreadcrumb } from \"./style\";\n\ninterface IBreadcrumb extends SpaceProps {\n    children: React.ReactNode;\n    /**\n     * Extra class name\n     */\n    className?: string;\n    /**\n     * Element type. Default is `nav`\n     */\n    as?: React.ElementType;\n}\n\nexport const Breadcrumb = ({\n    children,\n    className,\n    as,\n    ...restProps\n}: IBreadcrumb) => (\n    <StyledNav aria-label=\"breadcrumb\" as={as}>\n        <StyledBreadcrumb\n            className={classnames(className, \"breadcrumb\")}\n            {...restProps}\n        >\n            {children}\n        </StyledBreadcrumb>\n    </StyledNav>\n);\n\nexport default Breadcrumb;\n","import { Link } from \"react-router-dom\";\nimport classnames from \"clsx\";\nimport { StyledBreadcrumbItem } from \"./style\";\n\ninterface IBreadcrumbItem {\n    children: React.ReactNode;\n    path?: string;\n    active?: boolean;\n    className?: string;\n}\n\nconst BreadcrumbItem = ({\n    children,\n    path,\n    active,\n    className,\n}: IBreadcrumbItem) => (\n    <StyledBreadcrumbItem\n        className={classnames(className, \"breadcrumb-item\", active && \"active\")}\n        $active={active}\n        aria-current={active && \"page\"}\n    >\n        {active && children}\n        {!active && path && <Link to={path}>{children}</Link>}\n    </StyledBreadcrumbItem>\n);\nexport default BreadcrumbItem;\n","import { Breadcrumb, BreadcrumbItem } from \"@doar/components\";\nimport styled, { css, themeGet } from \"@doar/shared/styled\";\n\nexport const StyledBreadWrap = styled((props) => <Breadcrumb {...props} />)`\n    background: transparent;\n    margin-bottom: 10px;\n    padding: 0;\n`;\n\nexport const StyledBreadItem = styled((props) => <BreadcrumbItem {...props} />)`\n    letter-spacing: 0.5px;\n    text-transform: uppercase;\n    font-size: 10px;\n    font-weight: 600;\n    font-family: ${themeGet(\"fonts.interUi\")};\n    a {\n        color: ${themeGet(\"colors.gray900\")};\n    }\n    ${({ active }) =>\n        active === true &&\n        css`\n            color: ${themeGet(\"colors.primary\")};\n        `}\n\n    &:before {\n        color: ${themeGet(\"colors.gray500\")};\n    }\n    ${(props) =>\n        props.theme.name === \"dark\" &&\n        css`\n            a {\n                color: ${themeGet(\"colors.gray600\")};\n            }\n        `}\n`;\n\nexport const PageHeading = styled.h4`\n    letter-spacing: -0.5px;\n    margin-bottom: 0px;\n`;\n","import { StyledBreadItem, StyledBreadWrap, PageHeading } from \"./style\";\n\ninterface IProps {\n    /**\n     * Pass previous page's text and link\n     */\n    prev: Array<{\n        text: string;\n        link: string;\n    }>;\n    /**\n     * Write page's title\n     */\n    title: string;\n    /**\n     * Write page's welcome text\n     */\n    wcText?: string;\n}\n\nconst Breadcrumb: React.FC<IProps> = ({ prev, title, wcText }) => {\n    return (\n        <>\n            <StyledBreadWrap>\n                {prev.map((item) => (\n                    <StyledBreadItem key={item.text} path={item.link}>\n                        {item.text}\n                    </StyledBreadItem>\n                ))}\n                <StyledBreadItem active>{title}</StyledBreadItem>\n            </StyledBreadWrap>\n            {wcText && <PageHeading>{wcText}</PageHeading>}\n        </>\n    );\n};\n\nexport default Breadcrumb;\n","import styled, { device, space } from \"@doar/shared/styled\";\n\nexport const StyledWrap = styled(({ pb, ...rest }) => <div {...rest} />)`\n    ${device.small} {\n        justify-content: space-between;\n        align-items: center;\n        display: flex;\n    }\n    ${space}\n`;\n","import { SpaceProps } from \"@doar/shared/styled\";\nimport Breadcrumb from \"../breadcrumb\";\nimport SearchForm from \"../search-form\";\nimport { StyledWrap } from \"./style\";\n\ninterface IProps extends SpaceProps {\n    /**\n     * Pass previous page's text and link\n     */\n    prev: Array<{\n        text: string;\n        link: string;\n    }>;\n    /**\n     * Write page's title\n     */\n    title: string;\n    /**\n     * Write page's welcome text\n     */\n    wcText?: string;\n    /**\n     * Put Extra classes\n     */\n    className?: string;\n}\n\nconst PageHeader = ({ prev, title, wcText, className, ...rest }: IProps) => {\n    return (\n        <StyledWrap className={className} {...rest}>\n            <div>\n                <Breadcrumb prev={prev} title={title} wcText={wcText} />\n            </div>\n            <SearchForm />\n        </StyledWrap>\n    );\n};\n\nexport default PageHeader;\n","import styled, { device, themeGet, css } from \"@doar/shared/styled\";\n\nexport const StyledForm = styled.form`\n    display: flex;\n    align-items: stretch;\n    margin-top: 20px;\n    ${device.small} {\n        margin-top: 0;\n    }\n    input {\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n        border-right-width: 0;\n        &:hover,\n        &:focus,\n        &:active {\n            border-color: ${themeGet(\"colors.primary\")};\n            box-shadow: none;\n            & + .btn {\n                border-color: ${themeGet(\"colors.primary\")};\n            }\n        }\n    }\n    .btn {\n        display: flex;\n        align-items: center;\n        padding: 0 0.5rem;\n        border: 1px solid ${themeGet(\"colors.text4\")};\n        border-left-width: 0;\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n        color: ${themeGet(\"colors.text3\")};\n        ${(props) =>\n            props.theme.name === \"dark\" &&\n            css`\n                background-color: ${themeGet(\"colors.gray800\")};\n            `}\n    }\n`;\n","import { Search } from \"react-feather\";\nimport { Input, Button } from \"@doar/components\";\nimport { StyledForm } from \"./style\";\n\nconst SearchForm = () => {\n    return (\n        <StyledForm>\n            <Input\n                type=\"text\"\n                id=\"post-search\"\n                name=\"post-serach\"\n                placeholder=\"Search people\"\n            />\n            <Button variant=\"texted\" iconButton size=\"md\">\n                <Search />\n            </Button>\n        </StyledForm>\n    );\n};\n\nexport default SearchForm;\n","import styled from \"@doar/shared/styled\";\n\nexport const StyledWrap = styled.div`\n    margin-bottom: 20px;\n    align-items: center;\n    justify-content: space-between;\n    display: flex;\n`;\n\nexport const StyledTitle = styled.h6`\n    font-size: 13px;\n    text-transform: uppercase;\n    font-weight: 600;\n    margin-bottom: 0px;\n`;\n","import { Anchor } from \"@doar/components\";\nimport { StyledWrap, StyledTitle } from \"./style\";\n\ninterface IProps {\n    title: string;\n    link?: {\n        text: string;\n        path: string;\n    };\n}\n\nconst WidgetTitle = ({ title, link }: IProps) => {\n    return (\n        <StyledWrap>\n            <StyledTitle>{title}</StyledTitle>\n            {link && (\n                <Anchor path={link.path} color=\"text3\">\n                    {link.text}\n                </Anchor>\n            )}\n        </StyledWrap>\n    );\n};\n\nexport default WidgetTitle;\n","import { SpaceProps } from \"@doar/shared/styled\";\nimport { StyledContainer } from \"./style\";\n\ninterface IProps extends SpaceProps {\n    children: React.ReactNode;\n    className?: string;\n}\n\nconst Container = ({ className, ...props }: IProps) => {\n    return <StyledContainer className={className} {...props} />;\n};\n\nexport default Container;\n","import styled, {\n    device,\n    space,\n    border as borderStyle,\n    SpaceProps,\n    BorderProps,\n    css,\n    themeGet,\n} from \"@doar/shared/styled\";\n\ninterface IProps extends SpaceProps, BorderProps {\n    $fullHeight?: boolean;\n    $align: \"top\" | \"center\" | \"bottom\";\n}\n\nconst conentCSS = css<IProps>`\n    padding: 20px;\n    ${device.large} {\n        padding: 25px;\n        margin-top: 60px;\n    }\n    ${device.xlarge} {\n        padding: 30px;\n    }\n    ${({ $fullHeight }) =>\n        $fullHeight &&\n        css`\n            min-height: calc(100vh - 107px);\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n        `}\n\n    ${({ $align }) =>\n        $align &&\n        $align !== \"center\" &&\n        css`\n            & > .container {\n                flex: 1;\n            }\n        `}\n\t${({ borderBottom, borderBottomWidth }) =>\n        (borderBottom || borderBottomWidth) &&\n        css`\n            border-bottom-style: solid;\n            border-bottom-color: ${themeGet(\"colors.border\")};\n        `}\n    ${(props) =>\n        props.theme.name === \"dark\" &&\n        css`\n            color: ${themeGet(\"colors.gray500\")};\n        `}\n    ${space};\n    ${borderStyle};\n`;\n\nexport const StyledContent = styled(\n    ({\n        p,\n        px,\n        py,\n        m,\n        mx,\n        my,\n        mt,\n        borderBottomWidth,\n        $fullHeight,\n        $align,\n        ...rest\n    }) => <div {...rest} />\n)<IProps>`\n    ${conentCSS}\n`;\n","import { SpaceProps, BorderProps } from \"@doar/shared/styled\";\nimport { Container } from \"@doar/components\";\nimport { StyledContent } from \"./style\";\n\ninterface IProps extends SpaceProps, BorderProps {\n    children: React.ReactNode;\n    className?: string;\n    fullHeight?: boolean;\n    align?: \"top\" | \"center\" | \"bottom\";\n}\n\nconst Content = ({\n    children,\n    className,\n    fullHeight,\n    align,\n    ...restProps\n}: IProps) => {\n    return (\n        <StyledContent\n            $fullHeight={fullHeight}\n            $align={align}\n            className={className}\n            {...restProps}\n        >\n            <Container className=\"container\" pl=\"0\" pr=\"0\">\n                {children}\n            </Container>\n        </StyledContent>\n    );\n};\n\nexport default Content;\n"],"names":["children","className","restProps","classnames","as","$el","StyledMedia","styled","m","ml","mr","mt","mb","display","alignItems","props","css","layout","space","flexbox","StyledMediaBody","width","$alignMent","px","StyledNav","StyledBreadcrumb","themeGet","theme","name","StyledBreadcrumbItem","$active","path","active","to","StyledBreadWrap","StyledBreadItem","PageHeading","prev","title","wcText","map","item","link","text","StyledWrap","pb","rest","device","StyledForm","type","id","placeholder","variant","iconButton","size","StyledTitle","color","conentCSS","$fullHeight","$align","borderBottom","borderBottomWidth","borderStyle","StyledContent","p","py","mx","my","fullHeight","align","pl","pr"],"sourceRoot":""}