{"version":3,"file":"static/js/1741.f3baae5b.chunk.js","mappings":"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","sources":["utill/google.ts"],"sourcesContent":["import axios from 'axios';\nimport moment from 'moment';\n\ninterface Props {\n    token?: string;\n}\nconst getUserRowData = async (props: Props) => {\n    const { token } = props;\n    if (!token) {\n        alert('회원고유값을 입력해주세요.');\n        return;\n    }\n    const baseUrl = `https://sheets.googleapis.com/v4/spreadsheets/${token}/values:batchGet?key=AIzaSyDQla4KV-7JEajCLk0Wg2zaBXO3VEqZvOM&ranges=${encodeURI(\n        '패스워드'\n    )}&majorDimension=ROWS`;\n    // const baseUrl = `https://sheets.googleapis.com/v4/spreadsheets/1VtapNLX2_rGSdMVctw30uzFEDUJyzUdnUneXv43dVSo/values:batchGet?key=AIzaSyDQla4KV-7JEajCLk0Wg2zaBXO3VEqZvOM&ranges=${encodeURI(\n    //     '패스워드'\n    // )}&ranges=${encodeURI('[매출]분기별!A1:E4')}&ranges=${encodeURI('[매출]누적치!A1:E4')}&ranges=${encodeURI(\n    //     '[매출]세목별!A1:C21'\n    // )}&ranges=${encodeURI('[매입]세목별!A1:C21')}&ranges=${encodeURI('[매입]손익!A1:E4')}&ranges=${encodeURI(\n    //     '[매입]부가율!A1:E4'\n    // )}&ranges=${encodeURI('[매입]납부세액!A1:E4')}&majorDimension=ROWS`;\n\n    const { data }: { data: any } = await axios.get(`${baseUrl}`);\n\n    const taxation = {\n        quarterlyRevenue: {}, //[매출] 분기별\n        cumulativeRevenue: {}, //[매출] 누적치\n        revenueByCategory: {}, //[매출]  세목별\n        profitAndLoss: {}, // [매입] 손익,\n        expensesByCategory: {}, //[매입] 세목별\n        expenseRatio: {}, //[매입]  부가율\n        taxPaymentAmount: {}, //  [매입] 납부세액\n    };\n    if (data) {\n        if (data && data?.valueRanges?.length > 0) {\n            const items = data;\n            items?.valueRanges.map(async (item: any, index: number) => {\n                if (item.range.indexOf('[매출]분기별') !== -1) {\n                    let resultData: any = {};\n                    await Promise.all(\n                        item?.values?.map((value: any, itemIndex: number) => {\n                            if (itemIndex !== 0) {\n                                let key = '';\n                                value?.map((valueList: any, valueListIndex: number) => {\n                                    if (valueListIndex === 0) {\n                                        key = valueList;\n                                        resultData[valueList] = [];\n                                    } else {\n                                        resultData[key].push(valueList);\n                                    }\n                                });\n                            }\n                        })\n                    );\n\n                    taxation.quarterlyRevenue = resultData;\n                } else if (item.range.indexOf('[매출]누적치') !== -1) {\n                    let resultData: any = {};\n                    await Promise.all(\n                        item?.values?.map((value: any, itemIndex: number) => {\n                            if (itemIndex !== 0) {\n                                let key = '';\n                                value?.map((valueList: any, valueListIndex: number) => {\n                                    if (valueListIndex === 0) {\n                                        key = valueList;\n                                        resultData[valueList] = [];\n                                    } else {\n                                        resultData[key].push(valueList);\n                                    }\n                                });\n                            }\n                        })\n                    );\n\n                    taxation.cumulativeRevenue = resultData;\n                } else if (item.range.indexOf('[매출]세목별') !== -1) {\n                    let resultData: any = {};\n                    const yearList: any = {};\n                    let key = '';\n                    await Promise.all(\n                        item?.values?.map((value: any, itemIndex: number) => {\n                            if (value?.length === 1) {\n                                key = value[0];\n                                resultData[key] = {};\n                            } else {\n                                let yearItem: any = {};\n                                let itemKey: any = '';\n                                value?.map((valueList: any, valueListIndex: number) => {\n                                    if (valueListIndex === 0) {\n                                        yearItem[valueList] = [];\n                                        itemKey = valueList;\n                                    } else {\n                                        yearItem[itemKey].push(valueList);\n                                    }\n                                });\n\n                                resultData[key] = { ...resultData[key], ...yearItem };\n                            }\n                        })\n                    );\n\n                    taxation.revenueByCategory = resultData;\n                    // } else if (item.range.indexOf('[매입]세목별') !== -1) {\n                    //     let resultData: any = {};\n                    //     const yearList: any = {};\n                    //     let key = '';\n                    //     await Promise.all(\n                    //         item?.values?.map((value: any, itemIndex: number) => {\n                    //             if (value?.length === 1) {\n                    //                 key = value[0];\n                    //                 resultData[key] = {};\n                    //             } else {\n                    //                 let yearItem: any = {};\n                    //                 let itemKey: any = '';\n                    //                 value?.map((valueList: any, valueListIndex: number) => {\n                    //                     if (valueListIndex === 0) {\n                    //                         yearItem[valueList] = [];\n                    //                         itemKey = valueList;\n                    //                     } else {\n                    //                         yearItem[itemKey].push(valueList);\n                    //                     }\n                    //                 });\n\n                    //                 resultData[key] = { ...resultData[key], ...yearItem };\n                    //             }\n                    //         })\n                    //     );\n\n                    //     taxation.expensesByCategory = resultData;\n                } else if (item.range.indexOf('[매입]손익') !== -1) {\n                    let resultData: any = {};\n                    await Promise.all(\n                        item?.values?.map((value: any, itemIndex: number) => {\n                            if (itemIndex !== 0) {\n                                let key = '';\n                                value?.map((valueList: any, valueListIndex: number) => {\n                                    if (valueListIndex === 0) {\n                                        key = valueList;\n                                        resultData[valueList] = [];\n                                    } else {\n                                        resultData[key].push(valueList);\n                                    }\n                                });\n                            }\n                        })\n                    );\n\n                    taxation.profitAndLoss = resultData;\n                } else if (item.range.indexOf('[매입]부가율') !== -1) {\n                    let resultData: any = {};\n                    await Promise.all(\n                        item?.values?.map((value: any, itemIndex: number) => {\n                            if (itemIndex !== 0) {\n                                let key = '';\n                                value?.map((valueList: any, valueListIndex: number) => {\n                                    if (valueListIndex === 0) {\n                                        key = valueList;\n                                        resultData[valueList] = [];\n                                    } else {\n                                        resultData[key].push(valueList);\n                                    }\n                                });\n                            }\n                        })\n                    );\n\n                    taxation.expenseRatio = resultData;\n                } else if (item.range.indexOf('[매입]납부세액') !== -1) {\n                    let resultData: any = {};\n                    await Promise.all(\n                        item?.values?.map((value: any, itemIndex: number) => {\n                            if (itemIndex !== 0) {\n                                let key = '';\n                                value?.map((valueList: any, valueListIndex: number) => {\n                                    if (valueListIndex === 0) {\n                                        key = valueList;\n                                        resultData[valueList] = [];\n                                    } else {\n                                        resultData[key].push(valueList);\n                                    }\n                                });\n                            }\n                        })\n                    );\n                    taxation.taxPaymentAmount = resultData;\n                }\n            });\n        }\n    }\n    const result = {\n        result: data ? 'SUCCESS' : 'FAIL',\n        data: taxation,\n    };\n    return result;\n};\nconst getTaxationData = async (props: Props) => {\n    // const { sheetId } = props;\n    // if (!sheetId) {\n    //     alert('회원고유값을 입력해주세요.');\n    //     return;\n    // }\n    const { token } = props;\n    console.log({ token });\n\n    if (!token) {\n        alert('회원고유값을 입력해주세요.');\n        return;\n    }\n    console.log(token);\n\n    console.log(token === '1VtapNLX2_rGSdMVctw30uzFEDUJyzUdnUneXv43dVSo');\n\n    //1VtapNLX2_rGSdMVctw30uzFEDUJyzUdnUneXv43dVSo\n    const baseUrl = `https://sheets.googleapis.com/v4/spreadsheets/${token}/values:batchGet?key=AIzaSyDQla4KV-7JEajCLk0Wg2zaBXO3VEqZvOM&ranges=${encodeURI(\n        '고객정보!B3:B4'\n    )}&ranges=${encodeURI('[세무_매출]분기별!A1:E4')}&ranges=${encodeURI('[세무_매출]누적치!A1:E4')}&ranges=${encodeURI(\n        '[세무_매출]세목별!A1:G8'\n    )}&ranges=${encodeURI('[세무_매출]세목별!A1:C21')}&ranges=${encodeURI(\n        '[세무_매입]세목별!A1:C21'\n    )}&ranges=${encodeURI('[세무_매입]손익!A1:E4')}&ranges=${encodeURI('[세무_매입]부가율!A1:E4')}&ranges=${encodeURI(\n        '[세무_매입]납부세액!A1:E4'\n    )}&majorDimension=ROWS`;\n    // const baseUrl = `https://sheets.googleapis.com/v4/spreadsheets/1VtapNLX2_rGSdMVctw30uzFEDUJyzUdnUneXv43dVSo/values:batchGet?key=AIzaSyDQla4KV-7JEajCLk0Wg2zaBXO3VEqZvOM&ranges=${encodeURI(\n    //     '고객정보!B3:B4'\n    // )}&ranges=${encodeURI('[세무_매출]분기별!A1:E4')}&ranges=${encodeURI('[세무_매출]누적치!A1:E4')}&ranges=${encodeURI(\n    //     '[세무_매출]세목별!A1:G8'\n    // )}&ranges=${encodeURI('[세무_매출]세목별!A1:C21')}&ranges=${encodeURI('[매입]세목별!A1:C21')}&ranges=${encodeURI(\n    //     '[세무_매입]손익!A1:E4'\n    // )}&ranges=${encodeURI('[세무_매입]부가율!A1:E4')}&ranges=${encodeURI(\n    //     '[세무_매입]납부세액!A1:E4'\n    // )}&majorDimension=ROWS`;\n\n    const { data }: { data: any } = await axios.get(`${baseUrl}`);\n\n    //     quarterlyRevenue: {}, //[매출] 분기별\n    // cumulativeRevenue: {}, //[매출] 누적치\n    // revenueByCategory: {}, //[매출]  세목별\n    // profitAndLoss: {}, // [매입] 손익,\n    // expensesByCategory: {}, //[매입] 세목별\n    // expenseRatio: {}, //[매입]  부가율\n    // taxPaymentAmount: {}, //  [매입] 납부세액\n    const taxation: any = {};\n    if (data) {\n        if (data && data?.valueRanges?.length > 0) {\n            const items = data;\n            await Promise.all(\n                items?.valueRanges.map(async (item: any, index: number) => {\n                    if (item.range.indexOf('[세무_매출]분기별') !== -1) {\n                        let resultData: any = {};\n                        await Promise.all(\n                            item?.values?.map((value: any, itemIndex: number) => {\n                                if (itemIndex !== 0) {\n                                    let key = '';\n                                    value?.map((valueList: any, valueListIndex: number) => {\n                                        if (valueListIndex === 0) {\n                                            key = valueList;\n                                            resultData[valueList] = [];\n                                        } else {\n                                            resultData[key].push(valueList);\n                                        }\n                                    });\n                                }\n                            })\n                        );\n\n                        taxation.quarterlyRevenue = resultData;\n                    } else if (item.range.indexOf('고객정보') !== -1) {\n                        let userIdInSheet = item?.values[0]?.[0];\n\n                        taxation.companyNm = userIdInSheet;\n                    } else if (item.range.indexOf('[세무_매출]누적치') !== -1) {\n                        let resultData: any = {};\n                        await Promise.all(\n                            item?.values?.map((value: any, itemIndex: number) => {\n                                if (itemIndex !== 0) {\n                                    let key = '';\n                                    value?.map((valueList: any, valueListIndex: number) => {\n                                        if (valueListIndex === 0) {\n                                            key = valueList;\n                                            resultData[valueList] = [];\n                                        } else {\n                                            resultData[key].push(valueList);\n                                        }\n                                    });\n                                }\n                            })\n                        );\n\n                        taxation.cumulativeRevenue = resultData;\n                    } else if (item.range.indexOf('[세무_매출]세목별') !== -1) {\n                        let resultData: any = {};\n                        const yearList: any = {};\n                        let key = '';\n\n                        await Promise.all(\n                            item?.values?.map((value: any, itemIndex: number) => {\n                                if (value?.length === 1) {\n                                    key = value[0];\n                                    resultData[key] = {};\n                                } else {\n                                    let yearItem: any = {};\n                                    let itemKey: any = '';\n                                    value?.map((valueList: any, valueListIndex: number) => {\n                                        if (valueListIndex === 0) {\n                                            yearItem[valueList] = [];\n                                            itemKey = valueList;\n                                        } else {\n                                            yearItem[itemKey].push(valueList);\n                                        }\n                                    });\n\n                                    resultData[key] = { ...resultData[key], ...yearItem };\n                                }\n                            })\n                        );\n\n                        taxation.revenueByCategory = resultData;\n                    } else if (item.range.indexOf('[세무_매입]세목별') !== -1) {\n                        let resultData: any = {};\n                        const yearList: any = {};\n                        let key = '';\n                        await Promise.all(\n                            item?.values?.map((value: any, itemIndex: number) => {\n                                if (value?.length === 1) {\n                                    key = value[0];\n                                    resultData[key] = {};\n                                } else {\n                                    let yearItem: any = {};\n                                    let itemKey: any = '';\n                                    value?.map((valueList: any, valueListIndex: number) => {\n                                        if (valueListIndex === 0) {\n                                            yearItem[valueList] = [];\n                                            itemKey = valueList;\n                                        } else {\n                                            yearItem[itemKey].push(valueList);\n                                        }\n                                    });\n\n                                    resultData[key] = { ...resultData[key], ...yearItem };\n                                }\n                            })\n                        );\n\n                        taxation.expensesByCategory = resultData;\n                    } else if (item.range.indexOf('[세무_매입]손익') !== -1) {\n                        let resultData: any = {};\n                        await Promise.all(\n                            item?.values?.map((value: any, itemIndex: number) => {\n                                if (itemIndex !== 0) {\n                                    let key = '';\n                                    value?.map((valueList: any, valueListIndex: number) => {\n                                        if (valueListIndex === 0) {\n                                            key = valueList;\n                                            resultData[valueList] = [];\n                                        } else {\n                                            resultData[key].push(valueList);\n                                        }\n                                    });\n                                }\n                            })\n                        );\n\n                        taxation.profitAndLoss = resultData;\n                    } else if (item.range.indexOf('[세무_매입]부가율') !== -1) {\n                        let resultData: any = {};\n                        await Promise.all(\n                            item?.values?.map((value: any, itemIndex: number) => {\n                                if (itemIndex !== 0) {\n                                    let key = '';\n                                    value?.map((valueList: any, valueListIndex: number) => {\n                                        if (valueListIndex === 0) {\n                                            key = valueList;\n                                            resultData[valueList] = [];\n                                        } else {\n                                            resultData[key].push(valueList);\n                                        }\n                                    });\n                                }\n                            })\n                        );\n\n                        taxation.expenseRatio = resultData;\n                    } else if (item.range.indexOf('[세무_매입]납부세액') !== -1) {\n                        let resultData: any = {};\n                        await Promise.all(\n                            item?.values?.map((value: any, itemIndex: number) => {\n                                if (itemIndex !== 0) {\n                                    let key = '';\n                                    value?.map((valueList: any, valueListIndex: number) => {\n                                        if (valueListIndex === 0) {\n                                            key = valueList;\n                                            resultData[valueList] = [];\n                                        } else {\n                                            resultData[key].push(valueList);\n                                        }\n                                    });\n                                }\n                            })\n                        );\n                        taxation.taxPaymentAmount = resultData;\n                    }\n                })\n            );\n        }\n    }\n    const result = {\n        result: data ? 'SUCCESS' : 'FAIL',\n        data: taxation,\n    };\n    return result;\n};\nconst getFinanceData = async (props: Props) => {\n    const { token } = props;\n    if (!token) {\n        alert('회원고유값을 입력해주세요.');\n        return;\n    }\n    const baseUrl = `https://sheets.googleapis.com/v4/spreadsheets/1VtapNLX2_rGSdMVctw30uzFEDUJyzUdnUneXv43dVSo/values:batchGet?key=AIzaSyDQla4KV-7JEajCLk0Wg2zaBXO3VEqZvOM&ranges=${encodeURI(\n        '고객정보!B3:B4'\n    )}&ranges=${encodeURI('[재무]순입출금!A1:C13')}&ranges=${encodeURI('[재무]순입출금누계!A1:C13')}&ranges=${encodeURI(\n        '[재무]번레이트!A1:B13'\n    )}&ranges=${encodeURI('[재무]런웨이!A1:B13')}&ranges=${encodeURI('[재무]유동성!A1:C2')}&ranges=${encodeURI(\n        '[재무]부채!A1:C2'\n    )}&ranges=${encodeURI('[재무]퇴직급여!A1:A2')}&ranges=${encodeURI('[재무]여신데이터!A1:C31')}&ranges=${encodeURI(\n        '[재무]정부보조금!A1:C31'\n    )}&ranges=${encodeURI('[재무]레버리지!A1:D13')}&ranges=${encodeURI('[재무]BEP!A1:I21')}&majorDimension=COLUMNS`;\n\n    const { data }: { data: any } = await axios.get(`${baseUrl}`);\n\n    // netDepositWithdrawal : [재무]순입출금\n    // netDepositCumulative : [재무]순입출금누계\n    const finance: any = {};\n    if (data) {\n        if (data && data?.valueRanges?.length > 0) {\n            const items = data;\n            await Promise.all(\n                items?.valueRanges.map(async (item: any, index: number) => {\n                    if (item.range.indexOf('고객정보') !== -1) {\n                        let userIdInSheet = item?.values[0]?.[0];\n\n                        finance.companyNm = userIdInSheet;\n                    } else if (item.range.indexOf(\"'[재무]순입출금'!A1:C13\") !== -1) {\n                        const newData = item.values.map((row: any) => row.slice(1));\n                        const mList = newData[0];\n                        const list = {\n                            deposit: newData[1],\n                            withdrawal: newData[2],\n                        };\n\n                        finance.netDepositWithdrawal = {\n                            mList,\n                            list,\n                        };\n                    } else if (item.range.indexOf(\"'[재무]순입출금누계'!A1:C13\") !== -1) {\n                        const newData = item.values.map((row: any) => row.slice(1));\n                        const mList = newData[0];\n                        const list = {\n                            deposit: newData[1],\n                            withdrawal: newData[2],\n                        };\n                        finance.netDepositCumulative = {\n                            mList,\n                            list,\n                        };\n                    } else if (item.range.indexOf('[재무]번레이트') !== -1) {\n                        const newData = item.values.map((row: any) => row.slice(1));\n                        const mList = newData[0];\n                        const list = newData[1];\n\n                        finance.exchangeRate = {\n                            mList,\n                            list,\n                        };\n                    } else if (item.range.indexOf('[재무]런웨이') !== -1) {\n                        const newData = item.values.map((row: any) => row.slice(1));\n                        const mList = newData[0];\n                        const list = newData[1];\n\n                        finance.runway = {\n                            mList,\n                            list,\n                        };\n                    } else if (item.range.indexOf('[재무]유동성') !== -1) {\n                        const newData = item.values.map((row: any) => row.slice(1));\n\n                        finance.liquidity = {\n                            liquidity: newData[0][0],\n                            min: newData[1][0],\n                            max: newData[2][0],\n                        };\n                    } else if (item.range.indexOf('[재무]부채') !== -1) {\n                        const newData = item.values.map((row: any) => row.slice(1));\n\n                        finance.debt = {\n                            debt: newData[0][0],\n                            min: newData[1][0],\n                            max: newData[2][0],\n                        };\n                    } else if (item.range.indexOf('[재무]퇴직급여') !== -1) {\n                        const newData = item.values.map((row: any) => row.slice(1));\n\n                        finance.severancePay = newData[0][0];\n                        // } else if (item.range.indexOf('[재무]여신데이터') !== -1) {\n                        //     const newData = item.values.map((row: any) => row.slice(1));\n\n                        //     finance.creditData = newData[0];\n                        // } else if (item.range.indexOf('[재무]정부보조금') !== -1) {\n                        //     const newData = item.values.map((row: any) => row.slice(1));\n\n                        //     finance.severancePay = newData[0][0];\n                    } else if (item.range.indexOf('[재무]레버리지') !== -1) {\n                        const newData = item.values.map((row: any) => row.slice(1));\n                        const mList = newData[0];\n                        const list = {\n                            fixedCost: newData[1], //고정비\n                            variableCost: newData[2], //변동비\n                            fixedAssets: newData[3], //고정자산\n                        };\n\n                        finance.leverage = {\n                            mList,\n                            list,\n                        };\n                    } else if (item.range.indexOf('[재무]여신데이터') !== -1) {\n                        const newData = item.values.map((row: any) => row.slice(1));\n                        let average: any = {\n                            average: '',\n                            averageTotal: '',\n                        };\n                        let key = '';\n\n                        const banks = newData[0];\n                        const balances = newData[1];\n                        const interestRates = newData[2];\n\n                        let dataList = await Promise.all(\n                            banks.map((bank: any, index: number) => ({\n                                bank,\n                                balance: balances[index],\n                                interestRate: parseFloat(interestRates[index]),\n                            }))\n                        );\n\n                        average = {\n                            average: interestRates[interestRates?.length - 1],\n                            averageTotal: balances[balances?.length - 1],\n                        };\n                        dataList = dataList.slice(0, -1);\n\n                        finance.bank = {\n                            dataList,\n                            average,\n                        };\n                    } else if (item.range.indexOf('[재무]정부보조금') !== -1) {\n                        const newData = item.values.map((row: any) => row.slice(1));\n\n                        const titles = newData[0];\n                        const balances = newData[1];\n                        const details = newData[2];\n\n                        let dataList = await Promise.all(\n                            titles.map((title: any, index: number) => ({\n                                title,\n                                balance: balances[index],\n                                detail: details[index],\n                            }))\n                        );\n\n                        finance.governmentSubsidy = dataList;\n                    } else if (item.range.indexOf('[재무]BEP') !== -1) {\n                        const newData: any = [];\n                        let returnData: any = {\n                            totalRevenue: [], //총매출은\n                            costs: [], //비용은\n                            contributionMargin: [], //공헌이익은\n                        };\n                        await Promise.all(\n                            item.values.map((row: any) => {\n                                if (row[0] === '총매출' || row[0] === '비용' || row[0] === '공헌이익') {\n                                    newData.push(row);\n                                }\n                            })\n                        );\n\n                        await Promise.all(\n                            newData?.map(async (row: any, index: number) => {\n                                if (row[0] === '총매출') {\n                                    const items = await Promise.all(\n                                        row.filter((rowItem: any, index: number) => index !== 0)\n                                    );\n                                    returnData.totalRevenue = items;\n                                } else if (row[0] === '비용') {\n                                    const items = await Promise.all(\n                                        row.filter((rowItem: any, index: number) => index !== 0)\n                                    );\n                                    returnData.costs = items;\n                                } else if (row[0] === '공헌이익') {\n                                    const items = await Promise.all(\n                                        row.filter((rowItem: any, index: number) => index !== 0)\n                                    );\n                                    returnData.contributionMargin = items;\n                                }\n                            })\n                        );\n\n                        // const newData = item.values.map((row: any) => row.slice(1));\n\n                        finance.bep = returnData;\n                    }\n                })\n            );\n        }\n    }\n    const result = {\n        result: data ? 'SUCCESS' : 'FAIL',\n        data: finance,\n    };\n    return result;\n};\ninterface LoginProps {\n    sheetId: string;\n    userId: string;\n    password: string;\n}\nconst LoginGoolge = async (props: LoginProps) => {\n    const { sheetId, userId, password } = props;\n    if (!sheetId || !userId || !password) {\n        return;\n    }\n    const baseUrl = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values:batchGet?key=AIzaSyDQla4KV-7JEajCLk0Wg2zaBXO3VEqZvOM&ranges=${encodeURI(\n        '고객정보!B3:B4'\n    )}&majorDimension=COLUMNS`;\n\n    try {\n        const { data }: { data: any } = await axios.get(`${baseUrl}`);\n\n        if (data?.valueRanges?.length > 0 && data?.valueRanges[0]?.values?.length > 0) {\n            let userIdInSheet = data?.valueRanges[0]?.values[0]?.[0];\n            let passwordInSheet = data?.valueRanges[0]?.values[0]?.[1];\n            if (userIdInSheet !== userId || passwordInSheet !== password) {\n                const result = {\n                    result: 'FAIL',\n                    message: '회사명과 비밀번호를 확인해주세요.',\n                };\n                return result;\n            }\n\n            const result = {\n                result: data ? 'SUCCESS' : 'FAIL',\n                message: '',\n            };\n            return result;\n        } else {\n            const result = {\n                result: 'FAIL',\n                message: '회사 고유 아이디를 확인해주세요.',\n            };\n            return result;\n        }\n    } catch (error) {\n        const result = {\n            result: 'FAIL',\n            message: '회사 고유 아이디를 확인해주세요.',\n        };\n        return result;\n    }\n};\n\nexport { getUserRowData, LoginGoolge, getTaxationData, getFinanceData };\n"],"names":["getUserRowData","props","token","alert","baseUrl","encodeURI","axios","data","taxation","quarterlyRevenue","cumulativeRevenue","revenueByCategory","profitAndLoss","expensesByCategory","expenseRatio","taxPaymentAmount","valueRanges","length","items","map","item","index","range","indexOf","resultData","Promise","all","values","value","itemIndex","key","valueList","valueListIndex","push","yearItem","itemKey","result","getTaxationData","console","log","userIdInSheet","companyNm","getFinanceData","finance","newData","row","slice","mList","list","deposit","withdrawal","netDepositWithdrawal","netDepositCumulative","exchangeRate","runway","liquidity","min","max","debt","severancePay","fixedCost","variableCost","fixedAssets","leverage","average","averageTotal","banks","balances","interestRates","bank","balance","interestRate","parseFloat","dataList","titles","details","title","detail","governmentSubsidy","returnData","totalRevenue","costs","contributionMargin","filter","rowItem","bep","LoginGoolge","sheetId","userId","password","passwordInSheet","message"],"sourceRoot":""}