{"version":3,"file":"static/js/7004.a687ca8d.chunk.js","mappings":"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","sources":["../../components/src/charts/apexchart/bar-chart.tsx","../../components/src/charts/apexchart/donut-chart.tsx","../../components/src/charts/apexchart/line-chart.tsx","../../components/src/static/select.svg","../../components/src/forms/form-elements/select/style.tsx","../../components/src/forms/form-elements/select/index.tsx","components/dashboard-one/modal-report/index.tsx","pages/chartOption/cumulativeRevenueChart.ts","pages/chartOption/expenseRatioChart.ts","pages/chartOption/expensesByCategoryChart.ts","pages/chartOption/optionProfitAndLossChart.ts","pages/chartOption/quarterlyRevenueChart.ts","pages/chartOption/revenueByCategoryChart.ts","components/dashboard-two/quarterlyRevenueCumulativeRevenue/style.tsx","components/dashboard-two/quarterlyRevenueCumulativeRevenue/index.tsx","components/dashboard-one/customers/style.tsx","components/dashboard-one/customers/index.tsx","components/dashboard-one/transaction/style.tsx","components/dashboard-one/transaction/index.tsx","containers/dashboard-one/row-four/index.tsx","components/dashboard-one/conversion/style.tsx","components/dashboard-one/conversion/index.tsx","containers/dashboard-one/row-one/index.tsx","components/dashboard-one/recent-earnings2/style.tsx","../../../node_modules/react-feather/dist/icons/bar-chart-2.js","components/dashboard-one/recent-earnings2/index.tsx","components/dashboard-one/sales-revenue2/style.tsx","components/dashboard-two/sessions-channel2/style.tsx","../../shared/data/dashboard-two/conversion-charts.ts","../../shared/data/dashboard-two/sessions-chart.ts","../../shared/data/dashboard-two/acquisition-chart.ts","../../shared/data/dashboard-two/device-sessions-chart.ts","components/dashboard-two/sessions-channel2/index.tsx","components/dashboard-one/sales-revenue2/index.tsx","containers/dashboard-one/row-three/index.tsx","components/dashboard-one/recent-earnings3/style.tsx","components/dashboard-one/recent-earnings3/index.tsx","components/dashboard-one/sales-revenue4/style.tsx","components/dashboard-two/sessions-channel3/style.tsx","components/dashboard-two/sessions-channel3/index.tsx","components/dashboard-one/sales-revenue4/index.tsx","containers/dashboard-one/row-three2/index.tsx","components/dashboard-one/real-time-sales/style2.tsx","components/dashboard-one/real-time-sales/style.tsx","components/dashboard-one/real-time-sales/index.tsx","containers/dashboard-one/row-two2/index.tsx","pages/chartOption/TopChart.ts","containers/dashboard-one/welcome-area/style.tsx","containers/dashboard-one/welcome-area/index.tsx","pages/dashboard-one.tsx","../../shared/data/dashboard-one/conversion-chart.ts","../../shared/data/dashboard-one/conversion.ts","../../shared/data/dashboard-one/sales-revenues.ts","../../shared/data/dashboard-one/revenue-growth.ts"],"sourcesContent":["import ApexChart from \"react-apexcharts\";\nimport { IProps } from \"./types\";\n\nconst BarChart = ({ options, series, width, height }: IProps) => {\n    return (\n        <ApexChart\n            type=\"bar\"\n            options={options}\n            series={series}\n            height={height}\n            width={width}\n        />\n    );\n};\n\nexport default BarChart;\n","import ApexChart from \"react-apexcharts\";\nimport { IProps } from \"./types\";\n\nconst DonutChart = ({ options, series, width, height }: IProps) => {\n    return (\n        <ApexChart\n            type=\"donut\"\n            options={options}\n            series={series}\n            height={height}\n            width={width}\n        />\n    );\n};\n\nexport default DonutChart;\n","import ApexChart from \"react-apexcharts\";\nimport { IProps } from \"./types\";\n\nconst LineChart = ({ options, series, width, height }: IProps) => {\n    return (\n        <ApexChart\n            type=\"line\"\n            options={options}\n            series={series}\n            height={height}\n            width={width}\n        />\n    );\n};\n\nexport default LineChart;\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSelect(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 4,\n    height: 5,\n    viewBox: \"0 0 4 5\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#3b4863\",\n    d: \"M2 0L0 2h4zm0 5L0 3h4z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSelect);\nexport default __webpack_public_path__ + \"static/media/select.a12df6f5c3827a26eb463cea3eef5aee.svg\";\nexport { ForwardRef as ReactComponent };","import { ErrorInputStyles, InputStyles, SuccessInputStyles, WarningInputStyles, allowedProps } from '../style';\nimport { IFeedback, TCustomStyle } from '../types';\nimport styled, { BorderProps, SpaceProps, themeGet } from '@doar/shared/styled';\n\nimport selectIcon from '../../../static/select.svg';\n\ninterface IInput extends IFeedback, SpaceProps, BorderProps {\n    $width?: string | any[];\n    $height?: string | any[];\n    $customStyle?: TCustomStyle;\n}\n\nexport const StyledSelect = styled('select').withConfig({\n    shouldForwardProp: (prop, defaultValidatorFn) => ![...allowedProps].includes(prop) && defaultValidatorFn(prop),\n})<IInput>`\n    border-color: ${themeGet('colors.text4')};\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    background: #fff url(${selectIcon}) no-repeat right 0.625rem center/8px 10px;\n    ${InputStyles};\n    ${({ $state, $showState, $showErrorOnly }) =>\n        $state === 'success' && !!$showState && !$showErrorOnly && SuccessInputStyles};\n    ${({ $state, $showState, $showErrorOnly }) =>\n        $state === 'warning' && !!$showState && !$showErrorOnly && WarningInputStyles};\n    ${({ $state, $showState, $showErrorOnly }) =>\n        $state === 'error' && !!$showState && !!$showErrorOnly && ErrorInputStyles};\n`;\n","import { forwardRef } from \"react\";\nimport classnames from \"clsx\";\nimport { StyledSelect } from \"./style\";\nimport Feedback from \"../feedback\";\nimport { IInputProps } from \"../types\";\n\ninterface IProps extends IInputProps {\n    children: React.ReactNode;\n}\n\nconst Select = forwardRef<HTMLSelectElement, IProps>(\n    (\n        {\n            className,\n            disabled,\n            state,\n            feedbackText,\n            id,\n            name,\n            value,\n            onChange,\n            onBlur,\n            onClick,\n            children,\n            showState,\n            showErrorOnly,\n            width,\n            height,\n            customStyle,\n            ...restProps\n        },\n        ref\n    ) => {\n        return (\n            <>\n                <StyledSelect\n                    className={classnames(className, \"custom-select\")}\n                    ref={ref}\n                    id={id}\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    onClick={onClick}\n                    onBlur={onBlur}\n                    $state={state}\n                    $showState={showState}\n                    $showErrorOnly={showErrorOnly}\n                    $width={width}\n                    $height={height}\n                    $customStyle={customStyle}\n                    disabled={disabled}\n                    {...restProps}\n                >\n                    {children}\n                </StyledSelect>\n                {feedbackText && showState && (\n                    <Feedback\n                        state={state}\n                        showState={showState}\n                        showErrorOnly={showErrorOnly}\n                    >\n                        {feedbackText}\n                    </Feedback>\n                )}\n            </>\n        );\n    }\n);\n\nSelect.displayName = \"Select\";\n\nSelect.defaultProps = {\n    showErrorOnly: true,\n};\n\nexport default Select;\n","import { Button, Modal, ModalBody, ModalClose, ModalFooter, ModalHeader, ModalTitle } from '@doar/components';\n\nimport { X } from 'react-feather';\n\ninterface IProps {\n    show: boolean;\n    onClose: () => void;\n}\n\nconst ModalReport = ({ show, onClose }: IProps) => {\n    return (\n        <Modal show={show} onClose={onClose}>\n            <ModalHeader>\n                <ModalTitle>Generate The Report</ModalTitle>\n                <ModalClose onClose={onClose}>\n                    <X />\n                </ModalClose>\n            </ModalHeader>\n            <ModalBody>\n                <p>Do you want to generate the report?</p>\n            </ModalBody>\n            <ModalFooter>\n                <Button>Generate Report</Button>\n                <Button color=\"secondary\" onClick={onClose}>\n                    Cancel\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nexport default ModalReport;\n","const cumulativeRevenueChart = async (data?: any) => {\n    const series: any = [];\n\n    if (data) {\n        // 객체의 키를 반복\n        const promises = [];\n        let index = 1;\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                const value = data[key];\n                const amountNumbers = value.map((amountString: any) => {\n                    // ,를 제거하고 숫자로 변환\n                    const numberValue = parseInt(amountString.replace(/,/g, ''), 10);\n                    return numberValue;\n                });\n\n                // 비동기 작업을 수행하는 Promise를 생성 및 배열에 추가\n                const item = {\n                    name: key,\n                    data: amountNumbers,\n                };\n                series.push(item);\n            }\n            const results = await Promise.all(series);\n        }\n    }\n\n    //     if (data) {\n    //     // 비동기적으로 순회하려면 for...of 대신 forEach나 for...in을 사용할 수 있습니다.\n    //     // 여기서는 forEach를 사용합니다.\n    //     await Promise.all(Array.from(data).map(async ([key, value]) => {\n    //         categories.push(key);\n\n    //         // 여기에서도 어떤 비동기 작업을 수행한다면 await를 사용하세요.\n    //         const processedValue = await someAsyncFunction(value);\n\n    //         const item = {\n    //             name: key,\n    //             data: processedValue,\n    //         };\n\n    //         series.push(item);\n    //     }));\n    // }\n    const returnData = {\n        options: {\n            chart: {\n                height: 180,\n                type: 'line',\n                zoom: {\n                    enabled: false,\n                },\n                stacked: true,\n                toolbar: {\n                    show: false,\n                },\n                dropShadow: {\n                    enabled: true,\n                    color: '#000',\n                    top: 18,\n                    left: 7,\n                    blur: 10,\n                    opacity: 0.2,\n                },\n            },\n\n            dataLabels: {\n                enabled: false,\n            },\n            // stroke: {\n            //     curve: \"straight\",\n            // },\n            grid: {\n                row: {\n                    colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n                    opacity: 0.5,\n                },\n            },\n            xaxis: {\n                categories: ['1분기', '2분기', '3분기', '4분기'],\n            },\n            yaxis: {\n                tickAmount: 6,\n                forceNiceScale: true,\n                labels: {\n                    style: {\n                        colors: ['#8392a5'],\n                        fontSize: '10px',\n                    },\n                    formatter: function (value: any) {\n                        return (value / 10000).toFixed(0) + '만원';\n                    },\n                },\n            },\n            legend: {\n                show: true, // legend를 표시합니다.\n                position: 'top', // legend의 위치를 지정할 수 있습니다.\n                horizontalAlign: 'right', // legend의 수평 정렬을 지정할 수 있습니다.\n                onItemClick: {\n                    toggleDataSeries: true, // 데이터 시리즈를 토글할 수 있도록 설정합니다.\n                },\n            },\n        },\n\n        series: series,\n    };\n    return returnData;\n};\n\nexport const defaultCumulativeRevenueChart = {\n    options: {\n        chart: {\n            height: 180,\n            type: 'line',\n            zoom: {\n                enabled: false,\n            },\n            stacked: true,\n            toolbar: {\n                show: false,\n            },\n            dropShadow: {\n                enabled: true,\n                color: '#000',\n                top: 18,\n                left: 7,\n                blur: 10,\n                opacity: 0.2,\n            },\n        },\n\n        dataLabels: {\n            enabled: false,\n        },\n        // stroke: {\n        //     curve: \"straight\",\n        // },\n        grid: {\n            row: {\n                colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n                opacity: 0.5,\n            },\n        },\n        xaxis: {\n            categories: ['1분기', '2분기', '3분기', '4분기'],\n        },\n        yaxis: {\n            tickAmount: 6,\n            forceNiceScale: true,\n            labels: {\n                style: {\n                    colors: ['#8392a5'],\n                    fontSize: '10px',\n                },\n                formatter: function (value: any) {\n                    return (value / 10000).toFixed(0) + '만원';\n                },\n            },\n        },\n        legend: {\n            show: true, // legend를 표시합니다.\n            position: 'top', // legend의 위치를 지정할 수 있습니다.\n            horizontalAlign: 'right', // legend의 수평 정렬을 지정할 수 있습니다.\n            onItemClick: {\n                toggleDataSeries: true, // 데이터 시리즈를 토글할 수 있도록 설정합니다.\n            },\n        },\n    },\n\n    series: [],\n};\n\nexport default cumulativeRevenueChart;\n","const expenseRatioChart = async (data?: any) => {\n    const series: any = [];\n\n    if (data) {\n        // 객체의 키를 반복\n        const promises = [];\n        let index = 1;\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                const value = data[key];\n                const amountNumbers = value.map((amountString: any) => {\n                    // ,를 제거하고 숫자로 변환\n                    const resultString = amountString.replace(/[,%]/g, '');\n                    const numberValue = Number(resultString);\n                    return numberValue;\n                });\n\n                // 비동기 작업을 수행하는 Promise를 생성 및 배열에 추가\n                const item = {\n                    name: key,\n                    data: amountNumbers,\n                };\n                series.push(item);\n            }\n            const results = await Promise.all(series);\n        }\n    }\n\n    //     if (data) {\n    //     // 비동기적으로 순회하려면 for...of 대신 forEach나 for...in을 사용할 수 있습니다.\n    //     // 여기서는 forEach를 사용합니다.\n    //     await Promise.all(Array.from(data).map(async ([key, value]) => {\n    //         categories.push(key);\n\n    //         // 여기에서도 어떤 비동기 작업을 수행한다면 await를 사용하세요.\n    //         const processedValue = await someAsyncFunction(value);\n\n    //         const item = {\n    //             name: key,\n    //             data: processedValue,\n    //         };\n\n    //         series.push(item);\n    //     }));\n    // }\n    const returnData = {\n        options: {\n            chart: {\n                height: 180,\n                type: 'line',\n                zoom: {\n                    enabled: false,\n                },\n                stacked: true,\n                toolbar: {\n                    show: false,\n                },\n                dropShadow: {\n                    enabled: true,\n                    color: '#000',\n                    top: 18,\n                    left: 7,\n                    blur: 10,\n                    opacity: 0.2,\n                },\n            },\n\n            dataLabels: {\n                enabled: false,\n            },\n            // stroke: {\n            //     curve: \"straight\",\n            // },\n            grid: {\n                row: {\n                    colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n                    opacity: 0.5,\n                },\n            },\n            xaxis: {\n                categories: ['1분기', '2분기', '3분기', '4분기'],\n            },\n            yaxis: {\n                tickAmount: 6,\n                forceNiceScale: true,\n                labels: {\n                    style: {\n                        colors: ['#8392a5'],\n                        fontSize: '10px',\n                    },\n                    formatter: function (value: any) {\n                        return value + '%';\n                    },\n                },\n            },\n            legend: {\n                show: true, // legend를 표시합니다.\n                position: 'top', // legend의 위치를 지정할 수 있습니다.\n                horizontalAlign: 'right', // legend의 수평 정렬을 지정할 수 있습니다.\n                onItemClick: {\n                    toggleDataSeries: true, // 데이터 시리즈를 토글할 수 있도록 설정합니다.\n                },\n            },\n        },\n\n        series: series,\n    };\n    return returnData;\n};\n\nexport const defaultExpenseRatioChart = {\n    options: {\n        chart: {\n            height: 180,\n            type: 'line',\n            zoom: {\n                enabled: false,\n            },\n            stacked: true,\n            toolbar: {\n                show: false,\n            },\n            dropShadow: {\n                enabled: true,\n                color: '#000',\n                top: 18,\n                left: 7,\n                blur: 10,\n                opacity: 0.2,\n            },\n        },\n\n        dataLabels: {\n            enabled: false,\n        },\n        // stroke: {\n        //     curve: \"straight\",\n        // },\n        grid: {\n            row: {\n                colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n                opacity: 0.5,\n            },\n        },\n        xaxis: {\n            categories: ['1분기', '2분기', '3분기', '4분기'],\n        },\n        yaxis: {\n            tickAmount: 6,\n            forceNiceScale: true,\n            labels: {\n                style: {\n                    colors: ['#8392a5'],\n                    fontSize: '10px',\n                },\n            },\n        },\n        legend: {\n            show: true, // legend를 표시합니다.\n            position: 'top', // legend의 위치를 지정할 수 있습니다.\n            horizontalAlign: 'right', // legend의 수평 정렬을 지정할 수 있습니다.\n            onItemClick: {\n                toggleDataSeries: true, // 데이터 시리즈를 토글할 수 있도록 설정합니다.\n            },\n        },\n    },\n\n    series: [],\n};\n\nexport default expenseRatioChart;\n","import { useEffect, useState } from 'react';\n\nconst colorList = ['#FF6B6B', '#70C1B3', '#5E72E4', '#FDA085', '#48DBFB', '#FEB72B'];\nconst expensesByCategoryChartChart = async ({ data, selectYear }: { data: any; selectYear: string }) => {\n    let series = [];\n    let categories = [];\n\n    // const setSettingOption = async () => {\n\n    if (data && data[selectYear]) {\n        const serieItems: any = [];\n        const categorieItems: any = [];\n        for (const key in data[selectYear]) {\n            if (data[selectYear].hasOwnProperty(key)) {\n                const value = data[selectYear][key];\n\n                Promise.all(\n                    value.map((valueItem: any, index: number) => {\n                        if ((index + 1) % 2 === 0) {\n                            const resultString = valueItem.replace(/[,%]/g, '');\n                            serieItems.push(Number(resultString));\n                        } else {\n                            // const resultString = valueItem.replace(/[,%]/g, '');\n                            categorieItems.push(key);\n                        }\n                    })\n                );\n            }\n        }\n\n        series = serieItems;\n        categories = categorieItems;\n    }\n    // };\n\n    // setSettingOption();\n\n    //     if (data) {\n    //     // 비동기적으로 순회하려면 for...of 대신 forEach나 for...in을 사용할 수 있습니다.\n    //     // 여기서는 forEach를 사용합니다.\n    //     await Promise.all(Array.from(data).map(async ([key, value]) => {\n    //         categories.push(key);\n\n    //         // 여기에서도 어떤 비동기 작업을 수행한다면 await를 사용하세요.\n    //         const processedValue = await someAsyncFunction(value);\n\n    //         const item = {\n    //             name: key,\n    //             data: processedValue,\n    //         };\n\n    //         series.push(item);\n    //     }));\n    // }\n    const returnData = {\n        options: {\n            labels: categories,\n            // labels: ['세글계산서', '온라인', '카드', '계산서', '현금영수증', '제로페이'],\n            dataLabels: {\n                enabled: false,\n            },\n            legend: {\n                show: true,\n                position: 'bottom',\n            },\n            plotOptions: {\n                pie: {\n                    donut: {\n                        size: '60%',\n                    },\n                },\n            },\n            colors: colorList,\n            stroke: {\n                colors: ['#fff'],\n            },\n        },\n        series: series,\n        // options: {\n        //     labels: categories,\n        //     dataLabels: {\n        //         enabled: false,\n        //     },\n        //     legend: {\n        //         show: true,\n        //         position: 'bottom',\n        //     },\n        //     plotOptions: {\n        //         pie: {\n        //             donut: {\n        //                 size: '60%',\n        //             },\n        //         },\n        //     },\n        //     colors: ['#FF6B6B', '#70C1B3', '#5E72E4', '#FDA085', '#48DBFB', '#FEB72B'],\n        //     stroke: {\n        //         colors: ['#fff'],\n        //     },\n        // },\n        // series: series,\n    };\n    return returnData;\n};\nexport const expensesByCategoryList = async ({ data, selectYear }: { data: any; selectYear: string }) => {\n    const trList = [];\n\n    if (data && data[selectYear]) {\n        for (const key in data[selectYear]) {\n            const tdList = [];\n\n            if (data[selectYear].hasOwnProperty(key)) {\n                tdList.push(key);\n                const value = data[selectYear][key];\n\n                Promise.all(\n                    value.map((valueItem: any, index: number) => {\n                        tdList.push(valueItem);\n                    })\n                );\n            }\n            trList.push(tdList);\n        }\n    }\n    // };\n\n    return trList;\n};\n\nexport const getScore = async ({ data, selectYear }: { data: any; selectYear: string }) => {\n    const serieItems: any = [];\n    const scoreList: any = [];\n    const typeList: any = [];\n\n    if (data && data[selectYear]) {\n        for (const key in data[selectYear]) {\n            if (data[selectYear].hasOwnProperty(key)) {\n                const value = data[selectYear][key];\n\n                Promise.all(\n                    value.map((valueItem: any, index: number) => {\n                        if ((index + 1) % 2 === 0) {\n                            const resultString = valueItem.replace(/[,%]/g, '');\n                            serieItems.push(Number(resultString));\n                        } else {\n                            typeList.push(valueItem);\n                        }\n                    })\n                );\n            }\n        }\n\n        const seriesWithIndeces = await serieItems?.map((value: any, index: number) => ({ value, index }));\n        seriesWithIndeces.sort((a: any, b: any) => b.value - a.value);\n        const indexList = await seriesWithIndeces?.map((item: any) => item.index);\n\n        Promise.all(\n            indexList.map((valueItem: any, index: number) => {\n                if (index <= 3) {\n                    const scoreItem: any = {\n                        color: colorList[valueItem],\n                        value: serieItems[valueItem],\n                        type: typeList[valueItem],\n                    };\n\n                    scoreList.push(scoreItem);\n                }\n            })\n        );\n    }\n    // };\n\n    return scoreList;\n};\n\nexport const defaultexpensesByCategoryChartChart = {\n    options: {\n        labels: [],\n        dataLabels: {\n            enabled: false,\n        },\n        legend: {\n            show: true,\n            position: 'bottom',\n        },\n        plotOptions: {\n            pie: {\n                donut: {\n                    size: '60%',\n                },\n            },\n        },\n        colors: colorList,\n        stroke: {\n            colors: ['#fff'],\n        },\n    },\n    series: [],\n};\n\nexport default expensesByCategoryChartChart;\n","const optionProfitAndLossChart = async (data?: any) => {\n    const series: any = [];\n\n    if (data) {\n        // 객체의 키를 반복\n        const promises = [];\n        let index = 1;\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                const value = data[key];\n                const amountNumbers = value.map((amountString: any) => {\n                    // ,를 제거하고 숫자로 변환\n                    const numberValue = parseInt(amountString.replace(/,/g, ''), 10);\n                    return numberValue;\n                });\n\n                // 비동기 작업을 수행하는 Promise를 생성 및 배열에 추가\n                const item = {\n                    name: key,\n                    data: amountNumbers,\n                };\n                series.push(item);\n            }\n            const results = await Promise.all(series);\n        }\n    }\n\n    //     if (data) {\n    //     // 비동기적으로 순회하려면 for...of 대신 forEach나 for...in을 사용할 수 있습니다.\n    //     // 여기서는 forEach를 사용합니다.\n    //     await Promise.all(Array.from(data).map(async ([key, value]) => {\n    //         categories.push(key);\n\n    //         // 여기에서도 어떤 비동기 작업을 수행한다면 await를 사용하세요.\n    //         const processedValue = await someAsyncFunction(value);\n\n    //         const item = {\n    //             name: key,\n    //             data: processedValue,\n    //         };\n\n    //         series.push(item);\n    //     }));\n    // }\n    const returnData = {\n        options: {\n            chart: {\n                height: 180,\n                type: 'line',\n                zoom: {\n                    enabled: false,\n                },\n                stacked: true,\n                toolbar: {\n                    show: false,\n                },\n                dropShadow: {\n                    enabled: true,\n                    color: '#000',\n                    top: 18,\n                    left: 7,\n                    blur: 10,\n                    opacity: 0.2,\n                },\n            },\n\n            dataLabels: {\n                enabled: false,\n            },\n            // stroke: {\n            //     curve: \"straight\",\n            // },\n            grid: {\n                row: {\n                    colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n                    opacity: 0.5,\n                },\n            },\n            xaxis: {\n                categories: ['1분기', '2분기', '3분기', '4분기'],\n            },\n            yaxis: {\n                tickAmount: 6,\n                forceNiceScale: true,\n                labels: {\n                    style: {\n                        colors: ['#8392a5'],\n                        fontSize: '10px',\n                    },\n                    formatter: function (value: any) {\n                        return (value / 10000).toFixed(0) + '만원';\n                    },\n                },\n            },\n            legend: {\n                show: true, // legend를 표시합니다.\n                position: 'top', // legend의 위치를 지정할 수 있습니다.\n                horizontalAlign: 'right', // legend의 수평 정렬을 지정할 수 있습니다.\n                onItemClick: {\n                    toggleDataSeries: true, // 데이터 시리즈를 토글할 수 있도록 설정합니다.\n                },\n            },\n        },\n\n        series: series,\n    };\n    return returnData;\n};\n\nexport const defaultOptionProfitAndLossChart = {\n    options: {\n        chart: {\n            height: 180,\n            type: 'line',\n            zoom: {\n                enabled: false,\n            },\n            stacked: true,\n            toolbar: {\n                show: false,\n            },\n            dropShadow: {\n                enabled: true,\n                color: '#000',\n                top: 18,\n                left: 7,\n                blur: 10,\n                opacity: 0.2,\n            },\n        },\n\n        dataLabels: {\n            enabled: false,\n        },\n        // stroke: {\n        //     curve: \"straight\",\n        // },\n        grid: {\n            row: {\n                colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n                opacity: 0.5,\n            },\n        },\n        xaxis: {\n            categories: ['1분기', '2분기', '3분기', '4분기'],\n        },\n        yaxis: {\n            tickAmount: 6,\n            forceNiceScale: true,\n            labels: {\n                style: {\n                    colors: ['#8392a5'],\n                    fontSize: '10px',\n                },\n                formatter: function (value: any) {\n                    return (value / 10000).toFixed(0) + '만원';\n                },\n            },\n        },\n        legend: {\n            show: true, // legend를 표시합니다.\n            position: 'top', // legend의 위치를 지정할 수 있습니다.\n            horizontalAlign: 'right', // legend의 수평 정렬을 지정할 수 있습니다.\n            onItemClick: {\n                toggleDataSeries: true, // 데이터 시리즈를 토글할 수 있도록 설정합니다.\n            },\n        },\n    },\n\n    series: [],\n};\n\nexport default optionProfitAndLossChart;\n","const quarterlyRevenueChart = async (data?: any) => {\n    const series: any = [];\n    const categories: any = ['1분기', '2분기', '3분기', '4분기'];\n\n    if (data) {\n        // 객체의 키를 반복\n        const promises = [];\n        let index = 1;\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                const value = data[key];\n                const amountNumbers = value.map((amountString: any) => {\n                    // ,를 제거하고 숫자로 변환\n                    const numberValue = parseInt(amountString.replace(/,/g, ''), 10);\n                    return numberValue;\n                });\n\n                // 비동기 작업을 수행하는 Promise를 생성 및 배열에 추가\n                const item = {\n                    name: key,\n                    data: amountNumbers,\n                };\n                series.push(item);\n            }\n            const results = await Promise.all(series);\n        }\n    }\n\n    //     if (data) {\n    //     // 비동기적으로 순회하려면 for...of 대신 forEach나 for...in을 사용할 수 있습니다.\n    //     // 여기서는 forEach를 사용합니다.\n    //     await Promise.all(Array.from(data).map(async ([key, value]) => {\n    //         categories.push(key);\n\n    //         // 여기에서도 어떤 비동기 작업을 수행한다면 await를 사용하세요.\n    //         const processedValue = await someAsyncFunction(value);\n\n    //         const item = {\n    //             name: key,\n    //             data: processedValue,\n    //         };\n\n    //         series.push(item);\n    //     }));\n    // }\n    const returnData = {\n        options: {\n            chart: {\n                height: 180,\n                toolbar: {\n                    show: false,\n                },\n            },\n            plotOptions: {\n                bar: {\n                    horizontal: false,\n                    columnWidth: '75%',\n                    endingShape: 'rounded',\n                },\n            },\n            dataLabels: {\n                enabled: false,\n            },\n            stroke: {\n                show: true,\n                width: 7,\n                colors: ['transparent'],\n            },\n            xaxis: {\n                categories: ['1분기', '2분기', '3분기', '4분기'],\n                labels: {\n                    show: true,\n                },\n                axisBorder: {\n                    show: false,\n                },\n                axisTicks: {\n                    show: false,\n                },\n            },\n            yaxis: {\n                tickAmount: 6,\n                forceNiceScale: true,\n                labels: {\n                    style: {\n                        colors: ['#8392a5'],\n                        fontSize: '10px',\n                    },\n                    formatter: function (value: any) {\n                        return (value / 10000).toFixed(0) + '만원';\n                    },\n                },\n            },\n            fill: {\n                opacity: 1,\n            },\n            colors: ['#66a4fb', '#65e0e0'],\n            grid: {\n                show: true,\n                borderColor: '#ebeef3',\n                xaxis: {\n                    lines: {\n                        show: false,\n                    },\n                },\n                yaxis: {\n                    lines: {\n                        show: true,\n                    },\n                },\n            },\n            // responsive: [\n            //     {\n            //         breakpoint: 1199,\n            //         options: {\n            //             stroke: {\n            //                 width: 3,\n            //             },\n            //         },\n            //     },\n            //     {\n            //         breakpoint: 575,\n            //         options: {\n            //             stroke: {\n            //                 width: 3,\n            //             },\n            //         },\n            //     },\n            // ],\n            legend: {\n                show: true, // legend를 표시합니다.\n                position: 'top', // legend의 위치를 지정할 수 있습니다.\n                horizontalAlign: 'right', // legend의 수평 정렬을 지정할 수 있습니다.\n                onItemClick: {\n                    toggleDataSeries: true, // 데이터 시리즈를 토글할 수 있도록 설정합니다.\n                },\n            },\n        },\n        // options: {\n        //     chart: {\n        //         height: 180,\n        //         toolbar: {\n        //             show: true,\n        //         },\n        //     },\n        //     zoom: {\n        //         enabled: false, // 확대/축소 버튼 비활성화\n        //     },\n        //     reset: {\n        //         enabled: false, // 리셋 버튼 비활성화\n        //     },\n        //     plotOptions: {\n        //         bar: {\n        //             horizontal: false,\n        //             columnWidth: '75%',\n        //             endingShape: 'rounded',\n        //         },\n        //     },\n        //     dataLabels: {\n        //         enabled: false,\n        //     },\n        //     stroke: {\n        //         show: true,\n        //         width: 7,\n        //         colors: ['transparent'],\n        //     },\n        //     xaxis: {\n        //         categories,\n        //         labels: {\n        //             show: true,\n        //         },\n        //         axisBorder: {\n        //             show: false,\n        //         },\n        //         axisTicks: {\n        //             show: false,\n        //         },\n        //     },\n        //     yaxis: {\n        //         tickAmount: 6,\n        //         // min: 0,\n        //         // max: 200,\n        //         forceNiceScale: true,\n        //         labels: {\n        //             style: {\n        //                 colors: ['#8392a5'],\n        //                 fontSize: '10px',\n        //             },\n        //             formatter: function (value: any) {\n        //                 return (value / 10000).toFixed(0) + '만';\n        //             },\n        //         },\n        //     },\n        //     fill: {\n        //         opacity: 1,\n        //     },\n        //     colors: ['#66a4fb', '#65e0e0'],\n        //     grid: {\n        //         show: true,\n        //         borderColor: '#ebeef3',\n        //         xaxis: {\n        //             lines: {\n        //                 show: false,\n        //             },\n        //         },\n        //         yaxis: {\n        //             lines: {\n        //                 show: true,\n        //             },\n        //         },\n        //     },\n        //     // responsive: [\n        //     //     {\n        //     //         breakpoint: 1199,\n        //     //         options: {\n        //     //             stroke: {\n        //     //                 width: 3,\n        //     //             },\n        //     //         },\n        //     //     },\n        //     //     {\n        //     //         breakpoint: 575,\n        //     //         options: {\n        //     //             stroke: {\n        //     //                 width: 3,\n        //     //             },\n        //     //         },\n        //     //     },\n        //     // ],\n        //     legend: {\n        //         show: true, // legend를 표시합니다.\n        //         position: 'top', // legend의 위치를 지정할 수 있습니다.\n        //         horizontalAlign: 'right', // legend의 수평 정렬을 지정할 수 있습니다.\n        //         onItemClick: {\n        //             toggleDataSeries: true, // 데이터 시리즈를 토글할 수 있도록 설정합니다.\n        //         },\n        //     },\n        // },\n        series: series,\n    };\n    return returnData;\n};\n\nexport const defaultQuarterlyRevenueChart = {\n    options: {\n        chart: {\n            height: 180,\n            toolbar: {\n                show: false,\n            },\n        },\n        plotOptions: {\n            bar: {\n                horizontal: false,\n                columnWidth: '75%',\n                endingShape: 'rounded',\n            },\n        },\n        dataLabels: {\n            enabled: false,\n        },\n        stroke: {\n            show: true,\n            width: 7,\n            colors: ['transparent'],\n        },\n        xaxis: {\n            categories: ['1분기', '2분기', '3분기', '4분기'],\n            labels: {\n                show: true,\n            },\n            axisBorder: {\n                show: false,\n            },\n            axisTicks: {\n                show: false,\n            },\n        },\n        yaxis: {\n            tickAmount: 6,\n            min: 0,\n            max: 200,\n            forceNiceScale: true,\n            labels: {\n                style: {\n                    colors: ['#8392a5'],\n                    fontSize: '10px',\n                },\n            },\n        },\n        fill: {\n            opacity: 1,\n        },\n        colors: ['#66a4fb', '#65e0e0'],\n        grid: {\n            show: true,\n            borderColor: '#ebeef3',\n            xaxis: {\n                lines: {\n                    show: false,\n                },\n            },\n            yaxis: {\n                lines: {\n                    show: true,\n                },\n            },\n        },\n        // responsive: [\n        //     {\n        //         breakpoint: 1199,\n        //         options: {\n        //             stroke: {\n        //                 width: 3,\n        //             },\n        //         },\n        //     },\n        //     {\n        //         breakpoint: 575,\n        //         options: {\n        //             stroke: {\n        //                 width: 3,\n        //             },\n        //         },\n        //     },\n        // ],\n        legend: {\n            show: true, // legend를 표시합니다.\n            position: 'top', // legend의 위치를 지정할 수 있습니다.\n            horizontalAlign: 'right', // legend의 수평 정렬을 지정할 수 있습니다.\n            onItemClick: {\n                toggleDataSeries: true, // 데이터 시리즈를 토글할 수 있도록 설정합니다.\n            },\n        },\n    },\n    series: [],\n};\n\nexport default quarterlyRevenueChart;\n","import { useEffect, useState } from 'react';\n\nconst colorList = ['#FF6B6B', '#70C1B3', '#5E72E4', '#FDA085', '#48DBFB', '#FEB72B'];\nconst revenueByCategoryChartChart = async ({ data, selectYear }: { data: any; selectYear: string }) => {\n    let series = [];\n    let categories = [];\n\n    // const setSettingOption = async () => {\n\n    if (data && data[selectYear]) {\n        const serieItems: any = [];\n        const categorieItems: any = [];\n        for (const key in data[selectYear]) {\n            if (data[selectYear].hasOwnProperty(key)) {\n                const value = data[selectYear][key];\n\n                Promise.all(\n                    value.map((valueItem: any, index: number) => {\n                        if ((index + 1) % 2 === 0) {\n                            const resultString = valueItem.replace(/[,%]/g, '');\n                            serieItems.push(Number(resultString));\n                        } else {\n                            // const resultString = valueItem.replace(/[,%]/g, '');\n                            categorieItems.push(key);\n                        }\n                    })\n                );\n            }\n        }\n\n        series = serieItems;\n        categories = categorieItems;\n    }\n    // };\n\n    // setSettingOption();\n\n    //     if (data) {\n    //     // 비동기적으로 순회하려면 for...of 대신 forEach나 for...in을 사용할 수 있습니다.\n    //     // 여기서는 forEach를 사용합니다.\n    //     await Promise.all(Array.from(data).map(async ([key, value]) => {\n    //         categories.push(key);\n\n    //         // 여기에서도 어떤 비동기 작업을 수행한다면 await를 사용하세요.\n    //         const processedValue = await someAsyncFunction(value);\n\n    //         const item = {\n    //             name: key,\n    //             data: processedValue,\n    //         };\n\n    //         series.push(item);\n    //     }));\n    // }\n    const returnData = {\n        options: {\n            labels: categories,\n            // labels: ['세글계산서', '온라인', '카드', '계산서', '현금영수증', '제로페이'],\n            dataLabels: {\n                enabled: false,\n            },\n            legend: {\n                show: true,\n                position: 'bottom',\n            },\n            plotOptions: {\n                pie: {\n                    donut: {\n                        size: '60%',\n                    },\n                },\n            },\n            colors: colorList,\n            stroke: {\n                colors: ['#fff'],\n            },\n        },\n        series: series,\n    };\n    return returnData;\n};\nexport const revenueByCategoryList = async ({ data, selectYear }: { data: any; selectYear: string }) => {\n    const trList = [];\n\n    if (data && data[selectYear]) {\n        for (const key in data[selectYear]) {\n            const tdList = [];\n\n            if (data[selectYear].hasOwnProperty(key)) {\n                tdList.push(key);\n                const value = data[selectYear][key];\n\n                Promise.all(\n                    value.map((valueItem: any, index: number) => {\n                        tdList.push(valueItem);\n                    })\n                );\n            }\n            trList.push(tdList);\n        }\n    }\n    // };\n\n    return trList;\n};\nexport const getScore = async ({ data, selectYear }: { data: any; selectYear: string }) => {\n    const serieItems: any = [];\n    const scoreList: any = [];\n    const typeList: any = [];\n\n    if (data && data[selectYear]) {\n        for (const key in data[selectYear]) {\n            if (data[selectYear].hasOwnProperty(key)) {\n                const value = data[selectYear][key];\n\n                Promise.all(\n                    value.map((valueItem: any, index: number) => {\n                        if ((index + 1) % 2 === 0) {\n                            const resultString = valueItem.replace(/[,%]/g, '');\n                            serieItems.push(Number(resultString));\n                        } else {\n                            typeList.push(valueItem);\n                        }\n                    })\n                );\n            }\n        }\n\n        const seriesWithIndeces = await serieItems?.map((value: any, index: number) => ({ value, index }));\n        seriesWithIndeces.sort((a: any, b: any) => b.value - a.value);\n        const indexList = await seriesWithIndeces?.map((item: any) => item.index);\n\n        Promise.all(\n            indexList.map((valueItem: any, index: number) => {\n                if (index <= 3) {\n                    const scoreItem: any = {\n                        color: colorList[valueItem],\n                        value: serieItems[valueItem],\n                        type: typeList[valueItem],\n                    };\n\n                    scoreList.push(scoreItem);\n                }\n            })\n        );\n    }\n    // };\n\n    return scoreList;\n};\n\nexport const defaultRevenueByCategoryChartChart = {\n    options: {\n        labels: [],\n        dataLabels: {\n            enabled: false,\n        },\n        legend: {\n            show: true,\n            position: 'bottom',\n        },\n        plotOptions: {\n            pie: {\n                donut: {\n                    size: '60%',\n                },\n            },\n        },\n        colors: colorList,\n        stroke: {\n            colors: ['#fff'],\n        },\n    },\n    series: [],\n};\n\nexport default revenueByCategoryChartChart;\n","import { Button, CardBody, CardHeader } from \"@doar/components\";\nimport styled, { device, themeGet } from \"@doar/shared/styled\";\n\nexport const StyledHeader = styled(({ ...props }) => <CardHeader {...props} />)`\n    display: flex;\n    flex-direction: column;\n    border-bottom: 0;\n    padding-top: 20px;\n    padding-left: 20px;\n    ${device.small} {\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: flex-start;\n    }\n    ${device.large} {\n        padding-left: 25px;\n        padding-top: 25px;\n    }\n`;\n\nexport const StyledBody = styled(({ ...props }) => <CardBody {...props} />)`\n    ${device.large} {\n        padding-left: 25px;\n        padding-top: 0px;\n        padding-bottom: 25px;\n        padding-right: 25px;\n    }\n    @media screen and (min-width: 1002px) {\n        padding-top: 18px;\n    }\n    ${device.xlarge} {\n        padding-top: 32px;\n    }\n`;\n\nexport const StyledButton = styled(({ ...props }) => <Button {...props} />)`\n    font-size: 10px;\n    text-transform: uppercase;\n    font-weight: 600;\n    letter-spacing: 0.5px;\n    line-height: 1.8;\n`;\n\nexport const StyledChart = styled.div`\n    margin-top: -24px;\n    margin-bottom: -14px;\n    height: 180px;\n    & > div {\n        margin-left: -17px;\n    }\n    ${device.small} {\n        height: 200px;\n    }\n    ${device.medium} {\n        height: 250px;\n    }\n    ${device.large} {\n        height: 350px;\n    }\n`;\n\nexport const StyledProgressDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 5px;\n`;\n\nexport const StyledProgressTitle = styled.h6`\n    font-size: 10px;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    font-weight: 600;\n    color: ${themeGet(\"colors.text2\")};\n    margin-bottom: 0px;\n`;\n\nexport const StyledProgressGoalText = styled.span`\n    color: ${themeGet(\"colors.text4\")};\n    font-size: 10px;\n`;\n\nexport const StyledProgressNumb = styled.h5`\n    line-height: 1.2;\n    font-family: ${themeGet(\"fonts.rubik\")};\n    font-weight: 400;\n    margin-bottom: 0px;\n`;\n\nexport const StyledProgressGoal = styled.h6`\n    line-height: 1.2;\n    font-family: ${themeGet(\"fonts.rubik\")};\n    font-weight: 400;\n    color: ${themeGet(\"colors.text3\")};\n    margin-bottom: 0px;\n`;\n","import {\n    ApexAreaChart,\n    ApexBarChart,\n    ApexLineChart,\n    ButtonGroup,\n    Card,\n    CardBody,\n    Col,\n    Row,\n    SectionTitle,\n} from '@doar/components';\nimport { StyledBody, StyledButton, StyledChart, StyledHeader } from './style';\nimport cumulativeRevenueChart, { defaultCumulativeRevenueChart } from 'src/pages/chartOption/cumulativeRevenueChart';\nimport quarterlyRevenueChart, { defaultQuarterlyRevenueChart } from 'src/pages/chartOption/quarterlyRevenueChart';\nimport { useEffect, useState } from 'react';\n\nimport CryptoChart from '../../dashboard-three/crypto-chart2';\nimport { StyledChart as LineStyled } from './styleline';\nimport MetricsProgress from './metrics-progress';\nimport { StyledBody as StyledBodyLine } from './styleLine2';\nimport { getTaxationData } from 'src/utill/google';\nimport { ticketChart2 } from '@doar/shared/data/dashboard-four';\nimport { useAppSelector } from '../../../redux/hooks';\nimport { webMetricsChart } from '@doar/shared/data/dashboard-two';\n\ninterface QuarterlyRevenueCumulativeRevenueProps {\n    optionQuarterlyRevenue: any;\n    optionCumulativeRevenue: any;\n}\nconst QuarterlyRevenueCumulativeRevenue = (props: QuarterlyRevenueCumulativeRevenueProps) => {\n    const { optionQuarterlyRevenue, optionCumulativeRevenue } = props;\n    // const { theme } = useAppSelector(state => state.theme);\n    // const chartOptions = webMetricsChart.options;\n    // const chartOptions = defaultQuarterlyRevenueChart.options;\n    // const [optionQuarterlyRevenue, setOptionQuarterlyRevenue] = useState<any>(defaultQuarterlyRevenueChart);\n    // const [optionCumulativeRevenue, setOptionCumulativeRevenue] = useState<any>(defaultCumulativeRevenueChart);\n    // useEffect(() => {\n    //     getData();\n    // }, []);\n\n    // const getData = async () => {\n    //     const data = await getTaxationData({});\n    //     const optionReturnQuarterlyRevenue = await quarterlyRevenueChart(data?.data?.quarterlyRevenue);\n    //     const optionReturnCumulativeRevenue = await cumulativeRevenueChart(data?.data?.cumulativeRevenue);\n    //     setOptionQuarterlyRevenue(optionReturnQuarterlyRevenue);\n    //     setOptionCumulativeRevenue(optionReturnCumulativeRevenue);\n    // };\n    // const darkChartOptions = {\n    //     ...chartOptions,\n    //     grid: {\n    //         ...chartOptions.grid,\n    //         borderColor: 'rgba(255, 255, 255, 0.06)',\n    //     },\n    // };\n    return (\n        <>\n            <Col lg={6} mt={['10px', null, null, '0px']}>\n                <Card>\n                    <CardBody>\n                        <StyledHeader>\n                            <div>\n                                <SectionTitle\n                                    title=\"매출\"\n                                    desc=\"매출 타이틀 관련 간단한 설명 넣어주세요.\"\n                                    descProps={{ fontSize: '12px' }}\n                                />\n                            </div>\n                        </StyledHeader>\n                        <StyledBody>\n                            <Row>\n                                <Col>\n                                    <StyledChart>\n                                        {/* <ApexBarChart\n                                            options={chartOptions}\n                                            series={webMetricsChart.series}\n                                            width=\"100%\"\n                                            height=\"100%\"\n                                        /> */}\n                                        <ApexBarChart\n                                            options={optionQuarterlyRevenue?.options}\n                                            series={optionQuarterlyRevenue?.series || []}\n                                            width=\"100%\"\n                                            height=\"100%\"\n                                        />\n                                        {/* {options?.options && (\n                                            <ApexBarChart\n                                                options={options?.options}\n                                                series={options?.series || []}\n                                                width=\"100%\"\n                                                height=\"100%\"\n                                            />\n                                        )} */}\n                                    </StyledChart>\n                                </Col>\n                            </Row>\n                        </StyledBody>\n                    </CardBody>\n                </Card>\n            </Col>\n            <Col lg={6}>\n                <Card height=\"100%\">\n                    <CardBody>\n                        <StyledHeader>\n                            <SectionTitle title=\"누적 매출\" />\n                        </StyledHeader>\n                        <ApexLineChart\n                            options={optionCumulativeRevenue.options}\n                            series={optionCumulativeRevenue?.series || []}\n                            height=\"350px\"\n                            width=\"100%\"\n                        />\n                    </CardBody>\n                </Card>\n                {/* <Card>\n                    <CardBody>\n                        <StyledHeader>\n                            <div>\n                                <SectionTitle\n                                    title=\"누적 매출\"\n                                    desc=\"누적 매출 타이틀 관련 간단한 설명 넣어주세요.\"\n                                    descProps={{ fontSize: '12px' }}\n                                />\n                            </div>\n                        </StyledHeader>\n                        <StyledBodyLine>\n                            <Row>\n                                <Col>\n                                    <LineStyled>\n                                        <ApexLineChart\n                                            options={optionCumulativeRevenue?.options}\n                                            series={optionCumulativeRevenue?.series}\n                                            height=\"350px\"\n                                            width=\"100%\"\n                                        />\n                                    </LineStyled>\n                                </Col>\n                            </Row>\n                        </StyledBodyLine>\n                    </CardBody>\n                </Card> */}\n            </Col>\n        </>\n    );\n};\n\nexport default QuarterlyRevenueCumulativeRevenue;\n","import { CardFooter, CardHeader, Dropdown } from \"@doar/components\";\nimport styled, {\n    LayoutProps,\n    SpaceProps,\n    device,\n    layout,\n    space,\n    themeGet,\n} from \"@doar/shared/styled\";\n\nexport const StyledHeader = styled(({ ...props }) => <CardHeader {...props} />)`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nexport const StyledHeaderRight = styled.div`\n    font-size: 18px;\n    display: flex;\n`;\n\nexport const StyledIcon = styled(({ m, ml, mr, mt, mb, ...rest }) => (\n    <a {...rest} />\n))<SpaceProps>`\n    color: ${themeGet(\"colors.text3\")};\n    line-height: 0;\n    ${space};\n`;\n\nexport const StyledListMiddle = styled.div`\n    ${device.small} {\n        padding-left: 10px;\n    }\n`;\n\nexport const StyledListTitle = styled.p`\n    font-weight: 500;\n    margin-bottom: 0px;\n    font-size: 13px;\n`;\n\nexport const StyledListText = styled.small`\n    color: ${themeGet(\"colors.text3\")};\n    font-size: 12px;\n    margin-bottom: 0px;\n`;\n\nexport const StyledListEnd = styled.div`\n    margin-left: auto;\n    text-align: right;\n    align-self: center;\n`;\n\nexport const StyledNavIcon = styled.nav`\n    display: flex;\n    flex-wrap: wrap;\n    padding-left: 0;\n    margin-bottom: 0;\n    list-style: none;\n    align-items: center;\n`;\n\nexport const StyledNavLink = styled(({ display, ...rest }) => (\n    <a {...rest} />\n))<LayoutProps>`\n    padding: 0;\n    color: ${themeGet(\"colors.text3\")};\n    display: none;\n    &:not(:first-of-type) {\n        margin-left: 10px;\n    }\n    ${layout};\n    svg {\n        width: 18px;\n        height: 18px;\n    }\n`;\n\nexport const StyledFooter = styled(({ ...props }) => <CardFooter {...props} />)`\n    text-align: center;\n    font-size: 13px;\n`;\n\nexport const StyledFooterLink = styled.a`\n    color: ${themeGet(\"colors.text3\")};\n    i {\n        margin-left: 5px;\n    }\n`;\n\nexport const StyledDropdown = styled(({ ...rest }) => <Dropdown {...rest} />)`\n    ${device.small} {\n        display: none;\n    }\n    button {\n        color: ${themeGet(\"colors.text3\")};\n    }\n    .dropdown-item {\n        display: flex;\n        align-items: center;\n        svg {\n            margin-right: 4px;\n        }\n    }\n`;\n","import { ApexLineChart, Card, ListGroup, ListGroupItem, SectionTitle } from '@doar/components';\nimport { StyledFooter, StyledFooterLink, StyledHeader, StyledHeaderRight, StyledIcon } from './style';\n\nimport Item from './item';\nimport { customers } from '@doar/shared/data/dashboard-one';\nimport { ticketChart2 } from '@doar/shared/data/dashboard-four';\n\nconst Customers = ({ optionExpenseRatioChart }: { optionExpenseRatioChart?: any }) => {\n    return (\n        <Card height=\"100%\">\n            <StyledHeader>\n                <SectionTitle title=\"부가율\" />\n            </StyledHeader>\n            <ApexLineChart\n                options={optionExpenseRatioChart.options}\n                series={optionExpenseRatioChart?.series || []}\n                height=\"350px\"\n                width=\"100%\"\n            />\n        </Card>\n    );\n};\n\nexport default Customers;\n","import { CardFooter, CardHeader } from \"@doar/components\";\nimport styled, {\n    SpaceProps,\n    css,\n    device,\n    space,\n    themeGet,\n} from \"@doar/shared/styled\";\n\nexport const StyledHeader = styled(({ ...props }) => <CardHeader {...props} />)`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nexport const StyledHeaderRight = styled.div`\n    font-size: 18px;\n    display: flex;\n`;\n\nexport const StyledIcon = styled(({ m, ml, mr, mt, mb, ...rest }) => (\n    <a {...rest} />\n))<SpaceProps>`\n    color: ${themeGet(\"colors.text3\")};\n    line-height: 0;\n    ${space};\n`;\n\nexport const StyledListMiddle = styled.div`\n    ${device.small} {\n        padding-left: 10px;\n    }\n`;\n\nexport const StyledListTitle = styled.p`\n    font-weight: 500;\n    margin-bottom: 0px;\n    font-size: 13px;\n`;\n\nexport const StyledListText = styled.small`\n    color: ${themeGet(\"colors.text3\")};\n    font-size: 12px;\n    margin-bottom: 0px;\n`;\n\nexport const StyledListEnd = styled.div`\n    margin-left: auto;\n    text-align: right;\n`;\n\nexport const StyledListTrans = styled.p`\n    font-weight: 500;\n    margin-bottom: 0px;\n    font-size: 13px;\n`;\n\ninterface ITransStatus {\n    $status: \"success\" | \"declined\" | \"pending\";\n}\n\nexport const StyledListStatus = styled.small<ITransStatus>`\n    font-size: 12px;\n    ${({ $status }) =>\n        $status === \"success\" &&\n        css`\n            color: ${themeGet(\"colors.success\")};\n        `}\n    ${({ $status }) =>\n        $status === \"pending\" &&\n        css`\n            color: ${themeGet(\"colors.info\")};\n        `}\n    ${({ $status }) =>\n        $status === \"declined\" &&\n        css`\n            color: ${themeGet(\"colors.danger\")};\n        `}\n`;\n\nexport const StyledFooter = styled(({ ...props }) => <CardFooter {...props} />)`\n    text-align: center;\n    font-size: 13px;\n`;\n\nexport const StyledFooterLink = styled.a`\n    color: ${themeGet(\"colors.text3\")};\n    i {\n        margin-left: 5px;\n    }\n`;\n","import { ApexLineChart, Card, ListGroup, ListGroupItem, SectionTitle } from '@doar/components';\nimport { StyledFooter, StyledFooterLink, StyledHeader, StyledHeaderRight, StyledIcon } from './style';\n\nimport Item from './item';\nimport { StyledChart } from '../../dashboard-two/quarterlyRevenueCumulativeRevenue/style';\nimport { ticketChart2 } from '@doar/shared/data/dashboard-four';\nimport { transaction } from '@doar/shared/data/dashboard-one';\n\nconst Transaction = ({ optionProfitAndLoss }: { optionProfitAndLoss?: any }) => {\n    return (\n        <Card height=\"100%\">\n            <StyledHeader>\n                <SectionTitle title=\"손익\" />\n            </StyledHeader>\n            <ApexLineChart\n                options={optionProfitAndLoss?.options}\n                series={optionProfitAndLoss?.series || []}\n                height=\"350px\"\n                width=\"100%\"\n            />\n        </Card>\n    );\n};\n\nexport default Transaction;\n","import cumulativeRevenueChart, { defaultCumulativeRevenueChart } from 'src/pages/chartOption/cumulativeRevenueChart';\nimport expenseRatioChart, { defaultExpenseRatioChart } from 'src/pages/chartOption/expenseRatioChart';\nimport optionProfitAndLossChart, {\n    defaultOptionProfitAndLossChart,\n} from 'src/pages/chartOption/optionProfitAndLossChart';\nimport { useEffect, useState } from 'react';\n\nimport { Col } from '@doar/components';\nimport Customers from '../../../components/dashboard-one/customers';\nimport RealTimeSales from '../../../components/dashboard-one/real-time-sales';\nimport Transaction from '../../../components/dashboard-one/transaction';\nimport { getTaxationData } from 'src/utill/google';\n\ninterface RowFourProps {\n    optionProfitAndLoss: any;\n    optionExpenseRatioChart: any;\n}\nconst RowFour = (props: RowFourProps) => {\n    const { optionProfitAndLoss, optionExpenseRatioChart } = props;\n    // const [optionProfitAndLoss, setOptionProfitAndLoss] = useState<any>(defaultOptionProfitAndLossChart);\n    // const [optionExpenseRatioChart, setOptionExpenseRatioChart] = useState<any>(defaultExpenseRatioChart);\n    // useEffect(() => {\n    //     getData();\n    // }, []);\n\n    // const getData = async () => {\n    //     const data = await getTaxationData({});\n    //     const optionReturnProfitAndLoss = await optionProfitAndLossChart(data?.data?.profitAndLoss);\n    //     const optionReturnExpenseRatioChart = await expenseRatioChart(data?.data?.expenseRatio);\n    //     setOptionProfitAndLoss(optionReturnProfitAndLoss);\n    //     setOptionExpenseRatioChart(optionReturnExpenseRatioChart);\n    // };\n    return (\n        <>\n            <Col md={6} xl={6} mt=\"10px\">\n                <Transaction optionProfitAndLoss={optionProfitAndLoss} />\n            </Col>\n            <Col md={6} xl={6} mt=\"10px\">\n                <Customers optionExpenseRatioChart={optionExpenseRatioChart} />\n            </Col>\n            {/* <Col md={6} xl={4} mt=\"10px\">\n                <RealTimeSales />\n            </Col> */}\n        </>\n    );\n};\n\nexport default RowFour;\n","import styled, { css, device, themeGet } from \"@doar/shared/styled\";\n\nexport const StyledCardTitle = styled.h6`\n    font-size: 11px;\n    letter-spacing: 0.5px;\n    text-transform: uppercase;\n    font-weight: 600;\n    color: ${themeGet(\"colors.text2\")};\n    margin-bottom: 8px;\n`;\n\nexport const StyledCardBottom = styled.div`\n    display: flex;\n    align-items: flex-end;\n    ${device.large} {\n        display: block;\n    }\n    ${device.xlarge} {\n        display: flex;\n    }\n`;\n\nexport const StyledCardRate = styled.h3`\n    line-height: 1.1;\n    margin-right: 5px;\n    margin-bottom: 0px;\n    font-family: ${themeGet(\"fonts.rubik\")};\n    font-weight: 400;\n`;\n\nexport const StyledCardText = styled.p`\n    margin-bottom: 0px;\n    color: ${themeGet(\"colors.text3\")};\n    font-size: 11px;\n`;\n\nexport const StyledChangePercent = styled.span<{ $growth: string }>`\n    font-weight: 500;\n    ${({ $growth }) =>\n        $growth === \"up\" &&\n        css`\n            color: ${themeGet(\"colors.success\")};\n        `}\n\n    ${({ $growth }) =>\n        $growth === \"down\" &&\n        css`\n            color: ${themeGet(\"colors.danger\")};\n        `}\n`;\n\nexport const StyledChart = styled.div`\n    margin-top: 10px;\n    margin-left: -15px;\n    margin-right: -15px;\n    margin-bottom: -15px;\n    ${device.small} {\n        margin-left: -20px;\n        margin-right: -20px;\n        margin-bottom: -20px;\n    }\n`;\n","import { ApexAreaChart, Card, CardBody, Col, Row } from \"@doar/components\";\nimport {\n    StyledCardBottom,\n    StyledCardRate,\n    StyledCardText,\n    StyledCardTitle,\n    StyledChangePercent,\n    StyledChart,\n} from \"./style\";\n\nimport { IConversion } from \"@doar/shared/types\";\nimport { useAppSelector } from \"../../../redux/hooks\";\n\ntype IProps = Omit<IConversion, \"id\">;\n\nconst Conversion = ({ title, rate, change, chart }: IProps) => {\n    const { theme } = useAppSelector((state) => state.theme);\n    const chartOptions = chart?.options || {};\n    const darkChartOptions = { ...chartOptions, colors: [\"#b4bdce\"] };\n\n    return (\n        <Card>\n            <CardBody>\n                <StyledCardTitle>{title}</StyledCardTitle>\n                <StyledCardBottom>\n                    <Row>\n                        <Col>\n                            <StyledCardRate>{rate}</StyledCardRate>\n                        </Col>\n                        <Col>\n                            <StyledCardText>\n                                <StyledChangePercent $growth={change.growth}>\n                                    {change?.percentage}{\" \"}\n                                    {change?.growth === \"up\" && (\n                                        <i className=\"fa fa-arrow-up\" />\n                                    )}\n                                    {change?.growth === \"down\" && (\n                                        <i className=\"fa fa-arrow-down\" />\n                                    )}{\" \"}\n                                </StyledChangePercent>\n                                {change?.time && <>{change?.time}</>}\n                            </StyledCardText>\n                        </Col>\n                    </Row>\n                </StyledCardBottom>\n                <StyledChart>\n                    {chart && (\n                        <ApexAreaChart\n                            options={\n                                theme !== \"dark\"\n                                    ? chartOptions\n                                    : darkChartOptions\n                            }\n                            series={chart?.series}\n                            height={70}\n                        />\n                    )}\n                </StyledChart>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport default Conversion;\n","import {\n    conversionChart1,\n    conversionChart2,\n    conversionChart3,\n    conversionChart4,\n} from '@doar/shared/data/dashboard-one/conversion-chart';\n\nimport { Col } from '@doar/components';\nimport Conversion from '../../../components/dashboard-one/conversion';\nimport { conversions } from '@doar/shared/data/dashboard-one';\n\nconst RowOne = ({ topChartData }: { topChartData: any }) => {\n    console.log({ topChartData });\n\n    return (\n        <>\n            <Col sm={6} lg={3} mt={['10px', null, null, '0px']} mb={'10px'}>\n                <Conversion\n                    title={'분기 대비 매출'}\n                    rate={\n                        topChartData?.section1?.amount?.toString() !== '0'\n                            ? topChartData?.section1?.amount?.toString()\n                            : '-'\n                    }\n                    change={{\n                        percentage: `${topChartData?.section1?.percent}%`,\n                        growth: topChartData?.section1?.percent > 0 ? 'up' : 'down',\n                        time: topChartData?.section1?.time || '-',\n                    }}\n                    chart={conversionChart1}\n                />\n            </Col>\n            <Col sm={6} lg={3} mt={['10px', null, null, '0px']} mb={'10px'}>\n                <Conversion\n                    title={'연도 대비 매출'}\n                    rate={\n                        topChartData?.section2?.amount?.toString() !== '0'\n                            ? topChartData?.section2?.amount?.toString()\n                            : '-'\n                    }\n                    change={{\n                        percentage: `${topChartData?.section2?.percent}%`,\n                        growth: topChartData?.section2?.percent > 0 ? 'up' : 'down',\n                        time: topChartData?.section2?.time || '-',\n                    }}\n                    chart={conversionChart2}\n                />\n            </Col>\n            <Col sm={6} lg={3} mt={['10px', null, null, '0px']} mb={'10px'}>\n                <Conversion\n                    title={'분기 대비 손익'}\n                    rate={\n                        topChartData?.section4?.amount?.toString() !== '0'\n                            ? topChartData?.section4?.amount?.toString()\n                            : '-'\n                    }\n                    change={{\n                        percentage: `${topChartData?.section4?.percent}%`,\n                        growth: topChartData?.section4?.percent > 0 ? 'up' : 'down',\n                        time: topChartData?.section4?.time || '-',\n                    }}\n                    chart={conversionChart3}\n                />\n            </Col>\n            <Col sm={6} lg={3} mt={['10px', null, null, '0px']} mb={'10px'}>\n                <Conversion\n                    title={'연도 대비 손익'}\n                    rate={\n                        topChartData?.section3?.amount?.toString() !== '0'\n                            ? topChartData?.section3?.amount?.toString()\n                            : '-'\n                    }\n                    change={{\n                        percentage: `${topChartData?.section3?.percent}%`,\n                        growth: topChartData?.section3?.percent > 0 ? 'up' : 'down',\n                        time: topChartData?.section3?.time || '-',\n                    }}\n                    chart={conversionChart4}\n                />\n            </Col>\n        </>\n    );\n};\n\nexport default RowOne;\n","import styled, {\n    device,\n    color as colorStyles,\n    ColorProps,\n    typography,\n    TypographyProps,\n    themeGet,\n    css,\n} from \"@doar/shared/styled\";\nimport { CardHeader, Table } from \"@doar/components\";\n\nexport const StyledHeader = styled(({ ...rest }) => <CardHeader {...rest} />)`\n    border-bottom: 0;\n    padding-bottom: 0px;\n    padding-top: 20px;\n    ${device.small} {\n        display: flex;\n        align-items: flex-start;\n        justify-content: space-between;\n    }\n`;\n\nexport const StyledMediaWrap = styled.div`\n    ${device.small} {\n        display: flex;\n    }\n`;\n\nexport const StyledMedaLeft = styled(({ bg, ...rest }) => (\n    <div {...rest} />\n))<ColorProps>`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    height: 40px;\n    margin-right: 10px;\n    opacity: 0.5;\n    color: #fff;\n    width: 40px;\n    ${device.medium} {\n        width: 50px;\n        height: 50px;\n    }\n    ${colorStyles};\n`;\n\nexport const StyledMediaTitle = styled.h6`\n    font-size: 10px;\n    white-space: nowrap;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    font-family: ${themeGet(\"fonts.interUi\")};\n    font-weight: 600;\n    color: ${themeGet(\"colors.text3\")};\n    margin-bottom: 5px;\n    ${device.medium} {\n        margin-bottom: 8px;\n    }\n`;\n\nexport const StyledMediaSub = styled.h4`\n    font-size: 20px;\n    font-family: ${themeGet(\"fonts.rubik\")};\n    font-weight: 400;\n    margin-bottom: 0px;\n    word-break: break-word;\n\n    ${device.small} {\n        font-size: 18px;\n    }\n    ${device.medium} {\n        font-size: 20px;\n    }\n    ${device.xxlarge} {\n        font-size: 24px;\n    }\n`;\n\nexport const StyledTable = styled(({ ...rest }) => <Table {...rest} />)`\n    font-size: 13px;\n    margin-bottom: 0;\n    thead th,\n    tbody td {\n        border-color: ${themeGet(\"colors.light\")};\n        ${(props) =>\n            props.theme.name === \"dark\" &&\n            css`\n                border-color: rgba(255, 255, 255, 0.06);\n            `}\n    }\n`;\n\nexport const StyledTH = styled.th`\n    font-family: ${themeGet(\"fonts.interUi\")};\n    font-size: 10px;\n    font-weight: 500;\n    letter-spacing: 0.5px;\n    text-transform: uppercase;\n    color: ${themeGet(\"colors.text3\")};\n    &:first-child {\n        padding-left: 20px;\n    }\n    &:not(:first-child) {\n        text-align: right;\n    }\n    &:last-child {\n        padding-right: 20px;\n    }\n`;\n\ninterface ITDProps extends ColorProps, TypographyProps {}\n\nexport const StyledTD = styled(({ color, fontWeight, ...rest }) => (\n    <td {...rest} />\n))<ITDProps>`\n    ${colorStyles};\n    ${typography}\n    &:first-child {\n        padding-left: 20px;\n    }\n    &:not(:first-child) {\n        text-align: right;\n    }\n    &:last-child {\n        padding-right: 20px;\n    }\n`;\n\nexport const StyledTDRate = styled(({ color, ...rest }) => <span {...rest} />)`\n    font-size: 10px;\n    font-weight: 400;\n    margin-left: 5px;\n    ${colorStyles};\n`;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar BarChart2 = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"18\",\n    y1: \"20\",\n    x2: \"18\",\n    y2: \"10\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"20\",\n    x2: \"12\",\n    y2: \"4\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"6\",\n    y1: \"20\",\n    x2: \"6\",\n    y2: \"14\"\n  }));\n});\nBarChart2.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nBarChart2.displayName = 'BarChart2';\nexport default BarChart2;","import { Button, ButtonGroup, Card, CardBody, Media, MediaBody, SectionTitle } from '@doar/components';\nimport {\n    StyledHeader,\n    StyledMedaLeft,\n    StyledMediaSub,\n    StyledMediaTitle,\n    StyledMediaWrap,\n    StyledTD,\n    StyledTDRate,\n    StyledTH,\n    StyledTable,\n} from './style';\n\nimport { BarChart2 } from 'react-feather';\nimport { flatDeep } from '@doar/shared/methods';\nimport { recentEarnings } from '@doar/shared/data/dashboard-one';\n\nconst RecentEarnings = ({ revenueByCategories, scores }: { revenueByCategories?: any; scores?: any }) => {\n    return (\n        <Card mb=\"10px\">\n            <StyledHeader>\n                <div>\n                    <SectionTitle title=\"매출\" desc=\"타이틀 및 서브 타이틀을 정해주세요.\" />\n                </div>\n            </StyledHeader>\n            <CardBody py={['30px', '30px']}>\n                <StyledMediaWrap>\n                    {scores?.length > 0 && (\n                        <>\n                            {scores?.map((item: any, index: number) => {\n                                return (\n                                    <Media\n                                        key={index}\n                                        mt={index !== 0 ? ['20px', '0px'] : ''}\n                                        ml={index !== 0 ? [null, '15px', '40px'] : ''}\n                                    >\n                                        <StyledMedaLeft bg={item?.color} opacity={'1'}>\n                                            <BarChart2 size=\"24\" />\n                                        </StyledMedaLeft>\n                                        <MediaBody>\n                                            <StyledMediaTitle>{index + 1}위</StyledMediaTitle>\n                                            <StyledMediaSub>{item?.value}%</StyledMediaSub>\n                                        </MediaBody>\n                                    </Media>\n                                );\n                            })}\n                        </>\n                    )}\n                </StyledMediaWrap>\n            </CardBody>\n            <StyledTable>\n                <thead>\n                    <tr>\n                        <StyledTH>매출 종류</StyledTH>\n                        <StyledTH>금액</StyledTH>\n                        <StyledTH>퍼센트</StyledTH>\n                        <StyledTH>매입/매출</StyledTH>\n                    </tr>\n                </thead>\n                <tbody>\n                    {revenueByCategories?.map((trList: any, index: number) => {\n                        return (\n                            <tr>\n                                {/* teal */}\n                                {trList?.map((tdList: any, tdListIndex: number) => {\n                                    const colorList = ['text3', 'pink', ''];\n                                    const fontWeightList = ['', '', '500'];\n                                    return (\n                                        <StyledTD\n                                            color={colorList[tdListIndex]}\n                                            fontWeight={fontWeightList[tdListIndex]}\n                                        >\n                                            {tdList}\n                                        </StyledTD>\n                                    );\n                                })}\n                                <StyledTD color=\"pink\">매출</StyledTD>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </StyledTable>\n        </Card>\n    );\n};\n\nexport default RecentEarnings;\n","import styled, { themeGet } from \"@doar/shared/styled\";\nimport { CardHeader, Table } from \"@doar/components\";\n\nexport const StyledHeader = styled(({ ...props }) => <CardHeader {...props} />)`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n`;\n\nexport const StyledHeaderRight = styled.div`\n    font-size: 13px;\n    align-items: center;\n    display: flex;\n`;\n\nexport const StyledHeaderRightText = styled.span`\n    margin-right: 5px;\n`;\n\nexport const StyledHeaderRightIcon = styled.span`\n    cursor: pointer;\n    line-height: 0;\n    color: ${themeGet(\"colors.text3\")};\n    display: flex;\n    align-items: center;\n    i {\n        margin-left: 5px;\n    }\n`;\n\nexport const StyeldMap = styled.div`\n    padding: 25px 20px;\n`;\n\nexport const StyledTable = styled(({ ...rest }) => <Table {...rest} />)`\n    font-size: 13px;\n    thead th,\n    tbody td {\n        border-color: ${themeGet(\"colors.light\")};\n    }\n    tbody td {\n        padding-top: 5px;\n        padding-bottom: 5px;\n    }\n`;\n\nexport const StyledTH = styled.th`\n    font-family: ${themeGet(\"fonts.interUi\")};\n    font-size: 10px;\n    font-weight: 500;\n    letter-spacing: 0.5px;\n    text-transform: uppercase;\n    color: ${themeGet(\"colors.text3\")};\n    &:first-child {\n        padding-left: 20px;\n        width: 40px;\n    }\n    &:not(:first-child) {\n        width: 25px;\n        text-align: right;\n    }\n    &:last-child {\n        padding-right: 20px;\n    }\n`;\n\nexport const StyledTD = styled.td`\n    &:first-child {\n        padding-left: 20px;\n        font-weight: 500;\n    }\n    &:not(:first-child) {\n        text-align: right;\n    }\n    &:last-child {\n        padding-right: 20px;\n    }\n`;\n","import styled, {\n    ColorProps,\n    color,\n    device,\n    themeGet,\n} from \"@doar/shared/styled\";\n\nexport const StyledChart = styled.div`\n    height: 180px;\n    margin-bottom: -33px;\n    ${device.large} {\n        height: 205px;\n    }\n    ${device.xlarge} {\n        height: 255px;\n    }\n`;\n\nexport const StyledFooterText = styled.p`\n    font-size: 10px;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    font-weight: 500;\n    color: ${themeGet(\"colors.text3\")};\n    margin-bottom: 5px;\n`;\n\nexport const StyledFooterDiv = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nexport const StyledFooterBullet = styled(({ bg, ...rest }) => (\n    <div {...rest} />\n))<ColorProps>`\n    width: 10px;\n    margin-right: 5px;\n    height: 10px;\n    border-radius: 50%;\n    ${color};\n`;\n\nexport const StyledFooterTitle = styled.h5`\n    font-family: ${themeGet(\"fonts.rubik\")};\n    font-weight: 400;\n    margin-bottom: 0px;\n    small {\n        color: ${themeGet(\"colors.text4\")};\n    }\n`;\n","import { df3data1, df3data2, df3data3, df3data4 } from \"../chart\";\n\nconst commonOptions = {\n    chart: {\n        toolbar: {\n            show: false,\n        },\n        stacked: true,\n        offsetX: 0,\n        offsetY: 0,\n    },\n    dataLabels: {\n        enabled: false,\n    },\n    plotOptions: {\n        bar: {\n            horizontal: false,\n            columnWidth: \"60%\",\n            endingShape: \"rounded\",\n        },\n    },\n    legend: {\n        show: false,\n    },\n    xaxis: {\n        labels: {\n            show: false,\n        },\n        axisBorder: {\n            show: false,\n        },\n        axisTicks: {\n            show: false,\n        },\n    },\n    yaxis: {\n        labels: {\n            show: false,\n        },\n        axisBorder: {\n            show: false,\n        },\n        axisTicks: {\n            show: false,\n        },\n    },\n    grid: { show: false },\n    fill: {\n        opacity: 1,\n    },\n    tooltip: {\n        enabled: false,\n    },\n};\n\nexport const conversionChart1 = {\n    options: {\n        ...commonOptions,\n        colors: [\"#66a4fb\", \"#e5e9f2\"],\n    },\n    series: [\n        {\n            data: df3data1,\n        },\n        {\n            data: df3data2,\n        },\n    ],\n};\n\nexport const conversionChart2 = {\n    options: {\n        ...commonOptions,\n        colors: [\"#7ee5e5\", \"#e5e9f2\"],\n    },\n    series: [\n        {\n            data: df3data1,\n        },\n        {\n            data: df3data3,\n        },\n    ],\n};\n\nexport const conversionChart3 = {\n    options: {\n        ...commonOptions,\n        colors: [\"#f77eb9\", \"#e5e9f2\"],\n    },\n    series: [\n        {\n            data: df3data1,\n        },\n        {\n            data: df3data4,\n        },\n    ],\n};\n","const data = {\n    options: {\n        labels: [\n            \"세글계산서\",\n            \"온라인\",\n            \"카드\",\n            \"계산서\",\n            \"현금영수증\",\n            \"제로페이\",\n        ],\n        dataLabels: {\n            enabled: false,\n        },\n        legend: {\n            show: true,\n            position: \"bottom\",\n        },\n        plotOptions: {\n            pie: {\n                donut: {\n                    size: \"60%\",\n                },\n            },\n        },\n        colors: [\n            \"#FF6B6B\",\n            \"#70C1B3\",\n            \"#5E72E4\",\n            \"#FDA085\",\n            \"#48DBFB\",\n            \"#FEB72B\",\n        ],\n        stroke: {\n            colors: [\"#fff\"],\n        },\n    },\n    series: [20, 20, 30, 25, 30, 25],\n};\n\nexport default data;\n","import { df1, df3 } from \"../chart\";\n\nconst data = {\n    options: {\n        chart: {\n            toolbar: {\n                show: false,\n            },\n        },\n        dataLabels: {\n            enabled: false,\n        },\n        stroke: {\n            curve: \"straight\",\n            lineCap: \"butt\",\n            width: 1.5,\n        },\n        legend: {\n            show: false,\n        },\n        xaxis: {\n            labels: {\n                show: false,\n            },\n            axisBorder: {\n                show: false,\n            },\n            axisTicks: {\n                show: false,\n            },\n        },\n        yaxis: {\n            labels: {\n                show: false,\n            },\n            axisBorder: {\n                show: false,\n            },\n            axisTicks: {\n                show: false,\n            },\n        },\n        grid: { show: false },\n        fill: {\n            opacity: 0.9,\n            type: \"solid\",\n            colors: [\"#f5f6fa\", \"#d1e6fa\"],\n        },\n        colors: [\"#c0ccda\", \"#0168fa\"],\n        tooltip: {\n            enabled: false,\n        },\n    },\n    series: [\n        {\n            data: df1,\n        },\n        {\n            data: df3,\n        },\n    ],\n};\n\nexport default data;\n","import { df1, df2, df3 } from \"../chart\";\n\nconst data = {\n    options: {\n        chart: {\n            toolbar: {\n                show: false,\n            },\n            offsetX: 0,\n            offsetY: 0,\n        },\n        dataLabels: {\n            enabled: false,\n        },\n        stroke: {\n            curve: \"straight\",\n            lineCap: \"butt\",\n            width: 1.5,\n        },\n        plotOptions: {\n            bar: {\n                columnWidth: \"60%\",\n                barHeight: \"70%\",\n            },\n        },\n        legend: {\n            show: false,\n        },\n        xaxis: {\n            type: \"numeric\",\n            axisBorder: {\n                show: false,\n            },\n            axisTicks: {\n                show: false,\n            },\n            tickAmount: 7,\n            tickPlacement: \"between\",\n            min: 40,\n            max: 80,\n            labels: {\n                style: {\n                    fontSize: \"10px\",\n                },\n            },\n        },\n        yaxis: {\n            labels: {\n                show: false,\n            },\n            axisBorder: {\n                show: false,\n            },\n            axisTicks: {\n                show: false,\n            },\n        },\n        grid: {\n            show: true,\n            borderColor: \"#e5e9f2\",\n            strokeDashArray: 0,\n            position: \"back\",\n            xaxis: {\n                lines: {\n                    show: true,\n                },\n            },\n            yaxis: {\n                lines: {\n                    show: false,\n                },\n            },\n        },\n        fill: {\n            colors: [\"#66a4fb\", \"#ffffff\", \"#e3e7ed\"],\n            opacity: [0.03, 0, 1],\n            type: \"solid\",\n        },\n        colors: [\"#66a4fb\", \"#00cccc\", \"#e3e7ed\"],\n        tooltip: {\n            enabled: false,\n        },\n    },\n    series: [\n        {\n            data: df2,\n            type: \"area\",\n        },\n        {\n            data: df1,\n            type: \"area\",\n        },\n        {\n            data: df3,\n            type: \"bar\",\n        },\n    ],\n};\n\nexport default data;\n","import { ApexDonutChart, Card, CardBody, CardFooter, CardHeader, Col, Row, SectionTitle } from '@doar/components';\nimport { StyledChart, StyledFooterBullet, StyledFooterDiv, StyledFooterText, StyledFooterTitle } from './style';\nimport { useEffect, useState } from 'react';\n\nimport { defaultRevenueByCategoryChartChart } from 'src/pages/chartOption/revenueByCategoryChart';\nimport { getTaxationData } from 'src/utill/google';\nimport { sessionsChart } from '@doar/shared/data/dashboard-two';\nimport { useAppSelector } from '../../../redux/hooks';\n\nconst SessoionsChannel2 = ({ revenueByCategory }: { revenueByCategory?: any }) => {\n    const { theme } = useAppSelector(state => state.theme);\n    const chartOptions = sessionsChart.options;\n    const [revenueByCategoryChart, setRevenueByCategoryChart] = useState<any>(defaultRevenueByCategoryChartChart);\n    const darkChartOptions = {\n        ...chartOptions,\n        stroke: {\n            colors: ['#1c273c'],\n        },\n    };\n\n    useEffect(() => {\n        getData();\n    }, [revenueByCategory]);\n\n    const getData = async () => {\n        if (revenueByCategory) {\n            setRevenueByCategoryChart(revenueByCategory);\n        }\n    };\n    return (\n        <>\n            <CardBody p={[null, null, null, '25px']} paddingBottom={'42px'} height={'100%'}>\n                <StyledChart>\n                    <ApexDonutChart\n                        options={revenueByCategoryChart?.options}\n                        series={revenueByCategoryChart?.series || []}\n                        width=\"100%\"\n                        height=\"100%\"\n                    />\n                </StyledChart>\n                {/* <Row marginTop={\"35px\"}>\n                    <Col col={4}>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"pink\" />\n                            <StyledFooterTitle>세금계산서</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={4}>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"primary\" />\n                            <StyledFooterTitle>온라인</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={4}>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"teal\" />\n                            <StyledFooterTitle>카드</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={4} mt=\"20px\">\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"pink\" />\n                            <StyledFooterTitle>세금계산서</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={4} mt=\"20px\">\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"primary\" />\n                            <StyledFooterTitle>온라인</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={4} mt=\"20px\">\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"teal\" />\n                            <StyledFooterTitle>카드</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                </Row> */}\n            </CardBody>\n            {/* <CardFooter p=\"20px\">\n                <Row>\n                    <Col col={6}>\n                        <StyledFooterText>Organic Search</StyledFooterText>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"pink\" />\n                            <StyledFooterTitle>세금계산서</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={6}>\n                        <StyledFooterText>Email</StyledFooterText>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"primary\" />\n                            <StyledFooterTitle>\n                                987 <small>20%</small>\n                            </StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={6} mt=\"20px\">\n                        <StyledFooterText>Referrral</StyledFooterText>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"teal\" />\n                            <StyledFooterTitle>\n                                2,010 <small>30%</small>\n                            </StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={6} mt=\"20px\">\n                        <StyledFooterText>Social Media</StyledFooterText>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"orange\" />\n                            <StyledFooterTitle>\n                                1,054 <small>25%</small>\n                            </StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                </Row>\n            </CardFooter> */}\n        </>\n    );\n};\n\nexport default SessoionsChannel2;\n","import { Card, CardBody, SectionTitle, VectorMap } from '@doar/components';\nimport {\n    StyeldMap,\n    StyledHeader,\n    StyledHeaderRight,\n    StyledHeaderRightIcon,\n    StyledHeaderRightText,\n    StyledTD,\n    StyledTH,\n    StyledTable,\n} from './style';\n\nimport SessoionsChannel2 from 'src/components/dashboard-two/sessions-channel2';\nimport { flatDeep } from '@doar/shared/methods';\nimport { salesRevenues } from '@doar/shared/data/dashboard-one';\nimport usajson from '@doar/shared/data/maps/usa.json';\n\nconst SalesRevenue3 = ({ revenueByCategory }: { revenueByCategory?: any }) => {\n    const keys = [...new Set(flatDeep(salesRevenues.map(sale => Object.keys(sale))))];\n    return (\n        <Card height={[null, null, null, '100%']} minHeight={'calc(100% - 100px);'}>\n            <StyledHeader>\n                <SectionTitle title=\"매출 퍼센트\" />\n            </StyledHeader>\n            <SessoionsChannel2 revenueByCategory={revenueByCategory} />\n        </Card>\n    );\n};\n\nexport default SalesRevenue3;\n","import { Col, Row } from '@doar/components';\nimport revenueByCategoryChartChart, {\n    getScore,\n    revenueByCategoryList,\n} from 'src/pages/chartOption/revenueByCategoryChart';\nimport { useEffect, useState } from 'react';\n\nimport CSVDownload from '../../../components/dashboard-one/csv-download2';\nimport RecentEarnings from '../../../components/dashboard-one/recent-earnings2';\nimport SalesRevenue from '../../../components/dashboard-one/sales-revenue2';\nimport { getTaxationData } from 'src/utill/google';\n\ninterface RowThree2Props {\n    revenueByCategoryData: any;\n    revenueByCategories: any;\n    scores: any;\n}\nconst RowThree2 = (props: RowThree2Props) => {\n    const { revenueByCategoryData, revenueByCategories, scores } = props;\n    // useEffect(() => {\n    //     getData();\n    // }, []);\n    // useEffect(() => {\n    //     getData();\n    // }, [selectedYear]);\n\n    // const [revenueByCategoryData, setRevenueByCategoryData] = useState<any>();\n    // const [revenueByCategories, setRevenueByCategories] = useState<any>();\n    // const [scores, setScores] = useState<any>();\n    // const getData = async () => {\n    //     const data = await getTaxationData({});\n    //     const revenueByCategory = await revenueByCategoryChartChart({\n    //         data: data?.data?.revenueByCategory,\n    //         selectYear: selectedYear,\n    //     });\n\n    //     setRevenueByCategoryData(revenueByCategory);\n    //     const revenueByCategoriesData = await revenueByCategoryList({\n    //         data: data?.data?.revenueByCategory,\n    //         selectYear: selectedYear,\n    //     });\n\n    //     setRevenueByCategories(revenueByCategoriesData);\n\n    //     const scoresData = await getScore({ data: data?.data?.revenueByCategory, selectYear: selectedYear });\n    //     setScores(scoresData);\n    // };\n    return (\n        <>\n            <Col xl={4} md={6} mt=\"10px\" mdOrder={1} xlOrder={0}>\n                <Row>\n                    <Col>\n                        <SalesRevenue revenueByCategory={revenueByCategoryData} />\n                    </Col>\n                    {/* <Col>\n                        <CSVDownload />\n                    </Col> */}\n                </Row>\n            </Col>\n            <Col xl={8} lg={12} mt=\"10px\">\n                <RecentEarnings revenueByCategories={revenueByCategories} scores={scores} />\n            </Col>\n        </>\n    );\n};\n\nexport default RowThree2;\n","import styled, {\n    device,\n    color as colorStyles,\n    ColorProps,\n    typography,\n    TypographyProps,\n    themeGet,\n    css,\n} from \"@doar/shared/styled\";\nimport { CardHeader, Table } from \"@doar/components\";\n\nexport const StyledHeader = styled(({ ...rest }) => <CardHeader {...rest} />)`\n    border-bottom: 0;\n    padding-bottom: 0px;\n    padding-top: 20px;\n    ${device.small} {\n        display: flex;\n        align-items: flex-start;\n        justify-content: space-between;\n    }\n`;\n\nexport const StyledMediaWrap = styled.div`\n    ${device.small} {\n        display: flex;\n    }\n`;\n\nexport const StyledMedaLeft = styled(({ bg, ...rest }) => (\n    <div {...rest} />\n))<ColorProps>`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    height: 40px;\n    margin-right: 10px;\n    opacity: 0.5;\n    color: #fff;\n    width: 40px;\n    ${device.medium} {\n        width: 50px;\n        height: 50px;\n    }\n    ${colorStyles};\n`;\n\nexport const StyledMediaTitle = styled.h6`\n    font-size: 10px;\n    white-space: nowrap;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    font-family: ${themeGet(\"fonts.interUi\")};\n    font-weight: 600;\n    color: ${themeGet(\"colors.text3\")};\n    margin-bottom: 5px;\n    ${device.medium} {\n        margin-bottom: 8px;\n    }\n`;\n\nexport const StyledMediaSub = styled.h4`\n    font-size: 20px;\n    font-family: ${themeGet(\"fonts.rubik\")};\n    font-weight: 400;\n    margin-bottom: 0px;\n    word-break: break-word;\n\n    ${device.small} {\n        font-size: 18px;\n    }\n    ${device.medium} {\n        font-size: 20px;\n    }\n    ${device.xxlarge} {\n        font-size: 24px;\n    }\n`;\n\nexport const StyledTable = styled(({ ...rest }) => <Table {...rest} />)`\n    font-size: 13px;\n    margin-bottom: 0;\n    thead th,\n    tbody td {\n        border-color: ${themeGet(\"colors.light\")};\n        ${(props) =>\n            props.theme.name === \"dark\" &&\n            css`\n                border-color: rgba(255, 255, 255, 0.06);\n            `}\n    }\n`;\n\nexport const StyledTH = styled.th`\n    font-family: ${themeGet(\"fonts.interUi\")};\n    font-size: 10px;\n    font-weight: 500;\n    letter-spacing: 0.5px;\n    text-transform: uppercase;\n    color: ${themeGet(\"colors.text3\")};\n    &:first-child {\n        padding-left: 20px;\n    }\n    &:not(:first-child) {\n        text-align: right;\n    }\n    &:last-child {\n        padding-right: 20px;\n    }\n`;\n\ninterface ITDProps extends ColorProps, TypographyProps {}\n\nexport const StyledTD = styled(({ color, fontWeight, ...rest }) => (\n    <td {...rest} />\n))<ITDProps>`\n    ${colorStyles};\n    ${typography}\n    &:first-child {\n        padding-left: 20px;\n    }\n    &:not(:first-child) {\n        text-align: right;\n    }\n    &:last-child {\n        padding-right: 20px;\n    }\n`;\n\nexport const StyledTDRate = styled(({ color, ...rest }) => <span {...rest} />)`\n    font-size: 10px;\n    font-weight: 400;\n    margin-left: 5px;\n    ${colorStyles};\n`;\n","import { Button, ButtonGroup, Card, CardBody, Media, MediaBody, SectionTitle } from '@doar/components';\nimport {\n    StyledHeader,\n    StyledMedaLeft,\n    StyledMediaSub,\n    StyledMediaTitle,\n    StyledMediaWrap,\n    StyledTD,\n    StyledTDRate,\n    StyledTH,\n    StyledTable,\n} from './style';\nimport expensesByCategoryChartChart, { expensesByCategoryList } from 'src/pages/chartOption/expensesByCategoryChart';\nimport { useEffect, useState } from 'react';\n\nimport { BarChart2 } from 'react-feather';\nimport { flatDeep } from '@doar/shared/methods';\nimport { getTaxationData } from 'src/utill/google';\nimport { recentEarnings } from '@doar/shared/data/dashboard-one';\n\nconst RecentEarnings = ({ expensesByCategories, scores }: { expensesByCategories?: any; scores?: any }) => {\n    return (\n        <Card mb=\"10px\">\n            <StyledHeader>\n                <div>\n                    <SectionTitle title=\"매출\" desc=\"타이틀 및 서브 타이틀을 정해주세요.\" />\n                </div>\n            </StyledHeader>\n            <CardBody py={['30px', '30px']}>\n                <StyledMediaWrap>\n                    {scores?.length > 0 && (\n                        <>\n                            {scores?.map((item: any, index: number) => {\n                                return (\n                                    <Media\n                                        key={index}\n                                        mt={index !== 0 ? ['20px', '0px'] : ''}\n                                        ml={index !== 0 ? [null, '15px', '40px'] : ''}\n                                    >\n                                        <StyledMedaLeft bg={item?.color} opacity={'1'}>\n                                            <BarChart2 size=\"24\" />\n                                        </StyledMedaLeft>\n                                        <MediaBody>\n                                            <StyledMediaTitle>{index + 1}위</StyledMediaTitle>\n                                            <StyledMediaSub>{item?.value}%</StyledMediaSub>\n                                        </MediaBody>\n                                    </Media>\n                                );\n                            })}\n                        </>\n                    )}\n                </StyledMediaWrap>\n            </CardBody>\n            <StyledTable>\n                <thead>\n                    <tr>\n                        <StyledTH>매입 종류</StyledTH>\n                        <StyledTH>금액</StyledTH>\n                        <StyledTH>퍼센트</StyledTH>\n                        <StyledTH>매입/매출</StyledTH>\n                    </tr>\n                </thead>\n                <tbody>\n                    {expensesByCategories?.map((trList: any, index: number) => {\n                        return (\n                            <tr>\n                                {trList?.map((tdList: any, tdListIndex: number) => {\n                                    const colorList = ['text3', 'teal', ''];\n                                    const fontWeightList = ['', '', '500'];\n                                    return (\n                                        <StyledTD\n                                            color={colorList[tdListIndex]}\n                                            fontWeight={fontWeightList[tdListIndex]}\n                                        >\n                                            {tdList}\n                                        </StyledTD>\n                                    );\n                                })}\n                                <StyledTD color=\"teal\">매입</StyledTD>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </StyledTable>\n        </Card>\n    );\n};\n\nexport default RecentEarnings;\n","import { CardHeader, Table } from \"@doar/components\";\nimport styled, { themeGet } from \"@doar/shared/styled\";\n\nexport const StyledHeader = styled(({ ...props }) => <CardHeader {...props} />)`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n`;\n\nexport const StyledHeaderRight = styled.div`\n    font-size: 13px;\n    align-items: center;\n    display: flex;\n`;\n\nexport const StyledHeaderRightText = styled.span`\n    margin-right: 5px;\n`;\n\nexport const StyledHeaderRightIcon = styled.span`\n    cursor: pointer;\n    line-height: 0;\n    color: ${themeGet(\"colors.text3\")};\n    display: flex;\n    align-items: center;\n    i {\n        margin-left: 5px;\n    }\n`;\n\nexport const StyeldMap = styled.div`\n    padding: 25px 20px;\n`;\n\nexport const StyledTable = styled(({ ...rest }) => <Table {...rest} />)`\n    font-size: 13px;\n    thead th,\n    tbody td {\n        border-color: ${themeGet(\"colors.light\")};\n    }\n    tbody td {\n        padding-top: 5px;\n        padding-bottom: 5px;\n    }\n`;\n\nexport const StyledTH = styled.th`\n    font-family: ${themeGet(\"fonts.interUi\")};\n    font-size: 10px;\n    font-weight: 500;\n    letter-spacing: 0.5px;\n    text-transform: uppercase;\n    color: ${themeGet(\"colors.text3\")};\n    &:first-child {\n        padding-left: 20px;\n        width: 40px;\n    }\n    &:not(:first-child) {\n        width: 25px;\n        text-align: right;\n    }\n    &:last-child {\n        padding-right: 20px;\n    }\n`;\n\nexport const StyledTD = styled.td`\n    &:first-child {\n        padding-left: 20px;\n        font-weight: 500;\n    }\n    &:not(:first-child) {\n        text-align: right;\n    }\n    &:last-child {\n        padding-right: 20px;\n    }\n`;\n","import styled, {\n    ColorProps,\n    color,\n    device,\n    themeGet,\n} from \"@doar/shared/styled\";\n\nexport const StyledChart = styled.div`\n    height: 180px;\n    margin-bottom: -33px;\n    ${device.large} {\n        height: 205px;\n    }\n    ${device.xlarge} {\n        height: 255px;\n    }\n`;\n\nexport const StyledFooterText = styled.p`\n    font-size: 10px;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    font-weight: 500;\n    color: ${themeGet(\"colors.text3\")};\n    margin-bottom: 5px;\n`;\n\nexport const StyledFooterDiv = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nexport const StyledFooterBullet = styled(({ bg, ...rest }) => (\n    <div {...rest} />\n))<ColorProps>`\n    width: 10px;\n    margin-right: 5px;\n    height: 10px;\n    border-radius: 50%;\n    ${color};\n`;\n\nexport const StyledFooterTitle = styled.h5`\n    font-family: ${themeGet(\"fonts.rubik\")};\n    font-weight: 400;\n    margin-bottom: 0px;\n    small {\n        color: ${themeGet(\"colors.text4\")};\n    }\n`;\n","import { ApexDonutChart, Card, CardBody, CardFooter, CardHeader, Col, Row, SectionTitle } from '@doar/components';\nimport { StyledChart, StyledFooterBullet, StyledFooterDiv, StyledFooterText, StyledFooterTitle } from './style';\nimport { useEffect, useState } from 'react';\n\nimport { defaultexpensesByCategoryChartChart } from 'src/pages/chartOption/expensesByCategoryChart';\nimport { sessionsChart } from '@doar/shared/data/dashboard-two';\nimport { useAppSelector } from '../../../redux/hooks';\n\nconst SessoionsChannel3 = ({ expensesByCategory }: { expensesByCategory?: any }) => {\n    const { theme } = useAppSelector(state => state.theme);\n    const chartOptions = sessionsChart.options;\n    const [expensesByCategoryChart, setRevenueByCategoryChart] = useState<any>(defaultexpensesByCategoryChartChart);\n    const darkChartOptions = {\n        ...chartOptions,\n        stroke: {\n            colors: ['#1c273c'],\n        },\n    };\n\n    useEffect(() => {\n        getData();\n    }, [expensesByCategory]);\n\n    const getData = async () => {\n        if (expensesByCategory) {\n            setRevenueByCategoryChart(expensesByCategory);\n        }\n    };\n    return (\n        <>\n            <CardBody p={[null, null, null, '25px']} paddingBottom={'42px'} height={'100%'}>\n                <StyledChart>\n                    <ApexDonutChart\n                        options={expensesByCategoryChart?.options}\n                        series={expensesByCategoryChart?.series || []}\n                        width=\"100%\"\n                        height=\"100%\"\n                    />\n                </StyledChart>\n                {/* <Row marginTop={\"35px\"}>\n                    <Col col={4}>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"pink\" />\n                            <StyledFooterTitle>세금계산서</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={4}>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"primary\" />\n                            <StyledFooterTitle>온라인</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={4}>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"teal\" />\n                            <StyledFooterTitle>카드</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={4} mt=\"20px\">\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"pink\" />\n                            <StyledFooterTitle>세금계산서</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={4} mt=\"20px\">\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"primary\" />\n                            <StyledFooterTitle>온라인</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={4} mt=\"20px\">\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"teal\" />\n                            <StyledFooterTitle>카드</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                </Row> */}\n            </CardBody>\n            {/* <CardFooter p=\"20px\">\n                <Row>\n                    <Col col={6}>\n                        <StyledFooterText>Organic Search</StyledFooterText>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"pink\" />\n                            <StyledFooterTitle>세금계산서</StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={6}>\n                        <StyledFooterText>Email</StyledFooterText>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"primary\" />\n                            <StyledFooterTitle>\n                                987 <small>20%</small>\n                            </StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={6} mt=\"20px\">\n                        <StyledFooterText>Referrral</StyledFooterText>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"teal\" />\n                            <StyledFooterTitle>\n                                2,010 <small>30%</small>\n                            </StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                    <Col col={6} mt=\"20px\">\n                        <StyledFooterText>Social Media</StyledFooterText>\n                        <StyledFooterDiv>\n                            <StyledFooterBullet bg=\"orange\" />\n                            <StyledFooterTitle>\n                                1,054 <small>25%</small>\n                            </StyledFooterTitle>\n                        </StyledFooterDiv>\n                    </Col>\n                </Row>\n            </CardFooter> */}\n        </>\n    );\n};\n\nexport default SessoionsChannel3;\n","import { Card, SectionTitle } from '@doar/components';\nimport {\n    StyeldMap,\n    StyledHeader,\n    StyledHeaderRight,\n    StyledHeaderRightIcon,\n    StyledHeaderRightText,\n    StyledTD,\n    StyledTH,\n    StyledTable,\n} from './style';\n\nimport SessoionsChannel3 from 'src/components/dashboard-two/sessions-channel3';\nimport { flatDeep } from '@doar/shared/methods';\nimport { salesRevenues } from '@doar/shared/data/dashboard-one';\nimport usajson from '@doar/shared/data/maps/usa.json';\n\nconst SalesRevenue3 = ({ expensesByCategory }: { expensesByCategory?: any }) => {\n    const keys = [...new Set(flatDeep(salesRevenues.map(sale => Object.keys(sale))))];\n    return (\n        <Card height={[null, null, null, '100%']} minHeight={'calc(100% - 100px);'}>\n            <StyledHeader>\n                <SectionTitle title=\"매입 퍼센트\" />\n            </StyledHeader>\n            <SessoionsChannel3 expensesByCategory={expensesByCategory} />\n        </Card>\n    );\n};\n\nexport default SalesRevenue3;\n","import { Col, Row } from '@doar/components';\nimport expensesByCategoryChartChart, {\n    expensesByCategoryList,\n    getScore,\n} from 'src/pages/chartOption/expensesByCategoryChart';\nimport { useEffect, useState } from 'react';\n\nimport CSVDownload3 from '../../../components/dashboard-one/csv-download3';\nimport RecentEarnings3 from '../../../components/dashboard-one/recent-earnings3';\nimport SalesRevenue from '../../../components/dashboard-one/sales-revenue2';\nimport SalesRevenue3 from '../../../components/dashboard-one/sales-revenue4';\nimport { getTaxationData } from 'src/utill/google';\n\ninterface RowThreeProps {\n    expensesByCategoryData: any;\n    expensesByCategories: any;\n    scores: any;\n}\n\nconst RowThree = (props: RowThreeProps) => {\n    const { expensesByCategoryData, expensesByCategories, scores } = props;\n    // useEffect(() => {\n    //     getData();\n    // }, []);\n    // useEffect(() => {\n    //     getData();\n    // }, [selectedYear]);\n\n    // const [expensesByCategoryData, setExpensesByCategoryData] = useState<any>();\n    // const [expensesByCategories, setRevenueByCategories] = useState<any>();\n    // const [scores, setScores] = useState<any>();\n    // const getData = async () => {\n    //     const data = await getTaxationData({});\n    //     const expensesByCategory = await expensesByCategoryChartChart({\n    //         data: data?.data?.expensesByCategory,\n    //         selectYear: selectedYear,\n    //     });\n\n    //     setExpensesByCategoryData(expensesByCategory);\n    //     const expensesByCategoriesData = await expensesByCategoryList({\n    //         data: data?.data?.expensesByCategory,\n    //         selectYear: selectedYear,\n    //     });\n\n    //     setRevenueByCategories(expensesByCategoriesData);\n\n    //     const scoresData = await getScore({ data: data?.data?.expensesByCategory, selectYear: selectedYear });\n    //     setScores(scoresData);\n    // };\n    return (\n        <>\n            <Col xl={4} md={6} mt=\"10px\" mdOrder={1} xlOrder={0}>\n                <Row>\n                    <Col>\n                        <SalesRevenue3 expensesByCategory={expensesByCategoryData} />\n                    </Col>\n                    {/* <Col>\n                        <CSVDownload3 />\n                    </Col> */}\n                </Row>\n            </Col>\n            <Col xl={8} lg={12} mt=\"10px\">\n                <RecentEarnings3 expensesByCategories={expensesByCategories} scores={scores} />\n            </Col>\n        </>\n    );\n};\n\nexport default RowThree;\n","import { CardHeader, Table } from \"@doar/components\";\nimport styled, {\n    ColorProps,\n    TypographyProps,\n    color as colorStyles,\n    css,\n    device,\n    themeGet,\n    typography,\n} from \"@doar/shared/styled\";\n\nexport const StyledHeader = styled(({ ...rest }) => <CardHeader {...rest} />)`\n    border-bottom: 0;\n    padding-bottom: 0px;\n    padding-top: 20px;\n    ${device.small} {\n        display: flex;\n        align-items: flex-start;\n        justify-content: space-between;\n    }\n`;\n\nexport const StyledMediaWrap = styled.div`\n    ${device.small} {\n        display: flex;\n    }\n`;\n\nexport const StyledMedaLeft = styled(({ bg, ...rest }) => (\n    <div {...rest} />\n))<ColorProps>`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    height: 40px;\n    margin-right: 10px;\n    opacity: 0.5;\n    color: #fff;\n    width: 40px;\n    ${device.medium} {\n        width: 50px;\n        height: 50px;\n    }\n    ${colorStyles};\n`;\n\nexport const StyledMediaTitle = styled.h6`\n    font-size: 10px;\n    white-space: nowrap;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    font-family: ${themeGet(\"fonts.interUi\")};\n    font-weight: 600;\n    color: ${themeGet(\"colors.text3\")};\n    margin-bottom: 5px;\n    ${device.medium} {\n        margin-bottom: 8px;\n    }\n`;\n\nexport const StyledMediaSub = styled.h4`\n    font-size: 20px;\n    font-family: ${themeGet(\"fonts.rubik\")};\n    font-weight: 400;\n    margin-bottom: 0px;\n    word-break: break-word;\n\n    ${device.small} {\n        font-size: 18px;\n    }\n    ${device.medium} {\n        font-size: 20px;\n    }\n    ${device.xxlarge} {\n        font-size: 24px;\n    }\n`;\n\nexport const StyledTable = styled(({ ...rest }) => <Table {...rest} />)`\n    font-size: 13px;\n    margin-bottom: 0;\n    margin-top: 1rem;\n    thead th,\n    tbody td {\n        border-color: ${themeGet(\"colors.light\")};\n        ${(props) =>\n            props.theme.name === \"dark\" &&\n            css`\n                border-color: rgba(255, 255, 255, 0.06);\n            `}\n    }\n`;\n\nexport const StyledTH = styled.th`\n    font-family: ${themeGet(\"fonts.interUi\")};\n    font-size: 10px;\n    font-weight: 500;\n    letter-spacing: 0.5px;\n    text-transform: uppercase;\n    color: ${themeGet(\"colors.text3\")};\n    &:first-child {\n        padding-left: 20px;\n    }\n    &:not(:first-child) {\n        text-align: right;\n    }\n    &:last-child {\n        padding-right: 20px;\n    }\n`;\n\ninterface ITDProps extends ColorProps, TypographyProps {}\n\nexport const StyledTD = styled(({ color, fontWeight, ...rest }) => (\n    <td {...rest} />\n))<ITDProps>`\n    ${colorStyles};\n    ${typography}\n    &:first-child {\n        padding-left: 20px;\n    }\n    &:not(:first-child) {\n        text-align: right;\n    }\n    &:last-child {\n        padding-right: 20px;\n    }\n`;\n\nexport const StyledTDRate = styled(({ color, ...rest }) => <span {...rest} />)`\n    font-size: 10px;\n    font-weight: 400;\n    margin-left: 5px;\n    ${colorStyles};\n`;\n","import styled, {\n    color as colorStyles,\n    ColorProps,\n    themeGet,\n    device,\n} from \"@doar/shared/styled\";\nimport { CardHeader, CardBody } from \"@doar/components\";\n\nexport const StyledHeader = styled(({ ...props }) => <CardHeader {...props} />)`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nexport const StyledList = styled.div`\n    padding-left: 0;\n    list-style: none;\n    display: flex;\n    margin-bottom: 0px;\n`;\n\nexport const StyledListItem = styled.button`\n    display: flex;\n    align-items: center;\n    border: none;\n    padding: 0;\n    background: transparent;\n    &.hidden {\n        text-decoration: line-through;\n    }\n    &:not(:last-child) {\n        margin-right: 0.5rem;\n    }\n    &:not(:first-child) {\n        margin-left: 5px;\n    }\n`;\n\nexport const StyledBullet = styled.span<ColorProps>`\n    display: block;\n    border-radius: 0.25rem;\n    height: 10px;\n    margin-right: 5px;\n    width: 10px;\n    ${colorStyles};\n`;\n\nexport const StyledListText = styled.span`\n    font-size: 10px;\n    text-transform: uppercase;\n    font-family: ${themeGet(\"fonts.interUi\")};\n    font-weight: 500;\n    color: ${themeGet(\"colors.text3\")};\n`;\n\nexport const StyledBodyTitle = styled.h4`\n    letter-spacing: -0.5px;\n    font-family: ${themeGet(\"fonts.rubik\")};\n    font-weight: 400;\n    margin-bottom: 10px;\n`;\n\nexport const StyledBodyStatus = styled(({ color, ...rest }) => (\n    <small {...rest} />\n))<ColorProps>`\n    font-size: 11px;\n    ${colorStyles};\n`;\n\nexport const StyledBodyText = styled.p`\n    font-size: 11px;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    font-weight: 500;\n    color: ${themeGet(\"colors.text3\")};\n`;\n\nexport const StyledChart = styled.div`\n    position: relative;\n    margin-left: -26px;\n    height: 270px;\n    ${device.small} {\n        height: 350px;\n    }\n    ${device.xlarge} {\n        height: 270px;\n    }\n`;\n\nexport const StyledBody = styled(({ ...props }) => <CardBody {...props} />)`\n    padding-bottom: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n`;\n","import { Card, SectionTitle } from '@doar/components';\nimport { StyledTD, StyledTH, StyledTable } from './style2';\nimport { testDataHeaders, testDatas } from '@doar/shared/data/dashboard-one/recent-earnings';\nimport { useEffect, useState } from 'react';\n\nimport { RowTwo2Props } from 'src/containers/dashboard-one/row-two2';\nimport { StyledBody } from './style';\nimport { getTaxationData } from 'src/utill/google';\n\nconst RealTimeSales = (props: RowTwo2Props) => {\n    const { thList, trList } = props;\n    // const [thList, setThList] = useState<any>([]);\n    // const [trList, setTrList] = useState<any>([]);\n    // useEffect(() => {\n    //     getData();\n    // }, []);\n\n    // const getData = async () => {\n    //     const data = await getTaxationData({});\n    //     console.log({ cumulativeRevenue: data?.data?.cumulativeRevenue });\n    //     if (data?.data?.cumulativeRevenue) {\n    //         const list = [];\n    //         for (const key in data?.data?.cumulativeRevenue) {\n    //             list.push(key);\n    //         }\n    //         console.log([list]);\n\n    //         setThList(list);\n    //         setTrList(data?.data?.cumulativeRevenue);\n    //     }\n    // };\n\n    return (\n        <Card height=\"100%\">\n            {/* <StyledHeader>\n                <SectionTitle title=\"부가가치세 추정 납부세액\" />\n            </StyledHeader> */}\n            <StyledBody>\n                <SectionTitle title=\"부가가치세 추정 납부세액\" />\n                <StyledTable>\n                    <thead>\n                        <tr>\n                            <StyledTH>{'구분'}</StyledTH>\n                            {thList?.map((item: any, index: number) => {\n                                return (\n                                    <StyledTD fontWeight=\"250\" key={index}>\n                                        {item}\n                                    </StyledTD>\n                                );\n                            })}\n                            {/* <StyledTH>{\"2021\"}</StyledTH>\n                            <StyledTH>{\"2022\"}</StyledTH> */}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {trList && (\n                            <>\n                                <tr>\n                                    <StyledTD color=\"text3\">1분기</StyledTD>\n                                    {Object.values(trList).map((tr: any, index: number) => {\n                                        return tr[0] ? <StyledTD key={index}>{tr[0]}</StyledTD> : '-';\n                                    })}\n                                </tr>\n                                <tr>\n                                    <StyledTD color=\"text3\">2분기</StyledTD>\n                                    {Object.values(trList).map((tr: any, index: number) => {\n                                        return tr[1] ? <StyledTD key={index}>{tr[1]}</StyledTD> : '-';\n                                    })}\n                                </tr>\n                                <tr>\n                                    <StyledTD color=\"text3\">3분기</StyledTD>\n                                    {Object.values(trList).map((tr: any, index: number) => {\n                                        return tr[2] ? <StyledTD key={index}>{tr[2]}</StyledTD> : '-';\n                                    })}\n                                </tr>\n                                <tr>\n                                    <StyledTD color=\"text3\">4분기</StyledTD>\n                                    {Object.values(trList).map((tr: any, index: number) => {\n                                        return tr[3] ? <StyledTD key={index}>{tr[3]}</StyledTD> : '-';\n                                    })}\n                                </tr>\n                            </>\n                        )}\n                    </tbody>\n                </StyledTable>\n                {/* <StyledChart>\n                    <ApexBarChart\n                        options={\n                            theme !== \"dark\" ? chartOptions : darkChartOptions\n                        }\n                        series={RealTimeSalesData.series}\n                        height=\"100%\"\n                    />\n                </StyledChart> */}\n            </StyledBody>\n        </Card>\n    );\n};\n\nexport default RealTimeSales;\n","import AccountRetention from '../../../components/dashboard-one/account-retention';\nimport { Col } from '@doar/components';\nimport RealTimeSales from '../../../components/dashboard-one/real-time-sales';\nimport RevenueGrowth from '../../../components/dashboard-one/revenue-growth';\n\nexport interface RowTwo2Props {\n    thList: any;\n    trList: any;\n}\nconst RowTwo2 = (props: RowTwo2Props) => {\n    const { thList, trList } = props;\n    return (\n        <>\n            <Col lg={12} xl={12} mt=\"10px\">\n                <RealTimeSales thList={thList} trList={trList} />\n            </Col>\n        </>\n    );\n};\n\nexport default RowTwo2;\n","import moment from 'moment';\n\ninterface TopChartProps {\n    data?: any;\n    selectYear?: any;\n}\nconst TopChart = async ({ data, selectYear }: TopChartProps) => {\n    const returnData = {\n        section1: {\n            amount: 0,\n            percent: 0,\n            time: '',\n        },\n        section2: {\n            amount: 0,\n            percent: 0,\n            time: '',\n        },\n        section3: {\n            amount: 0,\n            percent: 0,\n            time: '',\n        },\n        section4: {\n            amount: 0,\n            percent: 0,\n            time: '',\n        },\n    };\n    if (data?.data?.quarterlyRevenue) {\n        console.log('----------------');\n\n        console.log(selectYear);\n        console.log(data?.data?.quarterlyRevenue);\n        let lastYear = false;\n        const keysArray = Object.keys(data?.data?.quarterlyRevenue);\n        const keyIndex = keysArray.indexOf(selectYear.toString());\n\n        if (keyIndex !== -1) {\n            if (keyIndex === 0) {\n                lastYear = true;\n            }\n            const selectSection12Data = data?.data?.quarterlyRevenue[`${(Number(selectYear) - 1).toString()}`];\n\n            const listLastYear = Number(moment().format('YYYY')) - 2;\n            const listLastYearItem = keysArray.indexOf(listLastYear.toString());\n            if (Number(selectYear) > listLastYear && listLastYearItem) {\n                const selectSection2Data = data?.data?.quarterlyRevenue[`${(Number(selectYear) - 2).toString()}`];\n                let sumSelectSection12Data = 0;\n                let sumSelectSection2Data = 0;\n                await Promise.all(\n                    selectSection2Data?.map((item: any) => {\n                        sumSelectSection2Data = +Number(item.replace(/,/g, ''));\n                    })\n                );\n                await Promise.all(\n                    selectSection12Data?.map((item: any) => {\n                        sumSelectSection12Data = +Number(item.replace(/,/g, ''));\n                    })\n                );\n                const percentageIncrease =\n                    ((sumSelectSection12Data - sumSelectSection2Data) / sumSelectSection2Data) * 100;\n                const increasevalue = percentageIncrease.toFixed(2);\n\n                returnData['section2'] = {\n                    amount: sumSelectSection12Data,\n                    percent: Number(increasevalue),\n                    time: selectYear.toString(),\n                };\n                console.log({ section2: returnData.section2 });\n            }\n\n            if (selectSection12Data?.length > 1) {\n                const percentageIncrease =\n                    ((Number(selectSection12Data[selectSection12Data?.length - 1].replace(/,/g, '')) -\n                        Number(selectSection12Data[selectSection12Data?.length - 2].replace(/,/g, ''))) /\n                        Number(selectSection12Data[selectSection12Data?.length - 2].replace(/,/g, ''))) *\n                    100;\n                const increasevalue = percentageIncrease.toFixed(2);\n\n                returnData['section1'] = {\n                    amount: Number(selectSection12Data[selectSection12Data?.length - 1].replace(/,/g, '')),\n                    percent: Number(increasevalue),\n                    time: `${selectSection12Data.length}분기`,\n                };\n                console.log({ section1: returnData.section1 });\n            }\n        }\n    }\n    if (data?.data?.profitAndLoss) {\n        console.log('----------------');\n\n        console.log(selectYear);\n        console.log(data?.data?.profitAndLoss);\n        let lastYear = false;\n        const keysArray = Object.keys(data?.data?.profitAndLoss);\n        const keyIndex = keysArray.indexOf(selectYear.toString());\n\n        if (keyIndex !== -1) {\n            if (keyIndex === 0) {\n                lastYear = true;\n            }\n            const selectSection12Data = data?.data?.profitAndLoss[`${(Number(selectYear) - 1).toString()}`];\n\n            const listLastYear = Number(moment().format('YYYY')) - 2;\n            const listLastYearItem = keysArray.indexOf(listLastYear.toString());\n            if (Number(selectYear) > listLastYear && listLastYearItem) {\n                const selectSection2Data = data?.data?.profitAndLoss[`${(Number(selectYear) - 2).toString()}`];\n                let sumSelectSection12Data = 0;\n                let sumSelectSection2Data = 0;\n                await Promise.all(\n                    selectSection2Data?.map((item: any) => {\n                        sumSelectSection2Data = +Number(item.replace(/,/g, ''));\n                    })\n                );\n                await Promise.all(\n                    selectSection12Data?.map((item: any) => {\n                        sumSelectSection12Data = +Number(item.replace(/,/g, ''));\n                    })\n                );\n                const percentageIncrease =\n                    ((sumSelectSection12Data - sumSelectSection2Data) / sumSelectSection2Data) * 100;\n                const increasevalue = percentageIncrease.toFixed(2);\n\n                returnData['section3'] = {\n                    amount: sumSelectSection12Data,\n                    percent: Number(increasevalue),\n                    time: selectYear.toString(),\n                };\n                console.log({ section3: returnData.section3 });\n            }\n\n            if (selectSection12Data?.length > 1) {\n                const percentageIncrease =\n                    ((Number(selectSection12Data[selectSection12Data?.length - 1].replace(/,/g, '')) -\n                        Number(selectSection12Data[selectSection12Data?.length - 2].replace(/,/g, ''))) /\n                        Number(selectSection12Data[selectSection12Data?.length - 2].replace(/,/g, ''))) *\n                    100;\n                const increasevalue = percentageIncrease.toFixed(2);\n\n                returnData['section4'] = {\n                    amount: Number(selectSection12Data[selectSection12Data?.length - 1].replace(/,/g, '')),\n                    percent: Number(increasevalue),\n                    time: `${selectSection12Data.length}분기`,\n                };\n                console.log({ section4: returnData.section4 });\n            }\n        }\n    }\n    console.log({ section1: returnData.section1 });\n    return returnData;\n};\n\nexport default TopChart;\n","import styled, { device } from '@doar/shared/styled';\n\nimport { Button } from '@doar/components';\n\nexport const StyledWelcomeArea = styled.div`\n    margin-bottom: 10px;\n    ${device.medium} {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n    ${device.large} {\n        margin-bottom: 25px;\n    }\n    ${device.xlarge} {\n        margin-bottom: 30px;\n    }\n`;\n\nexport const StyledWelcomeLeft = styled.div``;\n\nexport const StyledWelcomeRight = styled.div`\n    margin-top: 10px;\n    ${device.medium} {\n        margin: 0;\n    }\n`;\n\nexport const StyledButton = styled(props => <Button {...props} />)`\n    text-transform: uppercase;\n    font-size: 10px;\n    line-height: 1.773;\n    width: 200px;\n    padding-left: 5px;\n    padding-right: 5px;\n    font-weight: 600;\n    letter-spacing: 0.5px;\n    ${device.small} {\n        font-size: 11px;\n        padding-left: 15px;\n        padding-right: 15px;\n    }\n`;\n","import { File, Mail, Printer } from 'react-feather';\nimport { StyledButton, StyledWelcomeArea, StyledWelcomeLeft, StyledWelcomeRight } from './style';\nimport { useEffect, useState } from 'react';\n\nimport Breadcrumb from '../../../components/breadcrumb';\nimport ModalPrint from '../../../components/dashboard-one/modal-print';\nimport ModalReport from '../../../components/dashboard-one/modal-report';\nimport { Select } from '@doar/components';\nimport moment from 'moment';\n\nconst WelcomeArea = ({\n    selectYear,\n    setSelectYear,\n    companyNm,\n    topChartData,\n}: {\n    selectYear: string;\n    setSelectYear: React.Dispatch<React.SetStateAction<string>>;\n    companyNm: string;\n    topChartData: any;\n}) => {\n    const [yearList, setYearList] = useState<string[]>([]);\n    useEffect(() => {\n        // 현재 날짜\n        const thisYear = moment().format('YYYY');\n\n        // 작년 날짜\n        const lastYear = moment().subtract(1, 'years').format('YYYY');\n\n        // 제작년 날짜\n        const twoYearsAgo = moment().subtract(2, 'years').format('YYYY');\n        setYearList([thisYear, lastYear, twoYearsAgo]);\n    }, []);\n    const [showPrintModal, setShowPrintModal] = useState(false);\n    const [showReportModal, setShowReportModal] = useState(false);\n    const handlePrintModal = () => {\n        setShowPrintModal(prev => !prev);\n    };\n    const handleReportModal = () => {\n        setShowReportModal(prev => !prev);\n    };\n    return (\n        <>\n            <StyledWelcomeArea>\n                <StyledWelcomeLeft>\n                    <Breadcrumb\n                        prev={[{ text: '세무 대시보드', link: '/taxation' }]}\n                        title=\"세무\"\n                        wcText={`${companyNm} 세무 보고서`}\n                    />\n                </StyledWelcomeLeft>\n                <StyledWelcomeRight>\n                    <div style={{ display: 'flex' }}>\n                        <Select\n                            id=\"createCategory\"\n                            name=\"createCategory\"\n                            value={selectYear}\n                            onChange={e => {\n                                setSelectYear(e.target.value);\n                            }}\n                            // showState={showState}\n                            // state={errors.createCategory ? 'error' : 'success'}\n                        >\n                            <option value=\"\">년도 선택하기</option>\n                            {yearList.map(year => (\n                                <option value={year} key={year}>\n                                    {year}년\n                                </option>\n                            ))}\n                        </Select>\n                        {/* </StyledGroup> */}\n                        {/* <StyledButton size=\"sm\" color=\"white\" hasIcon ml=\"10px\" onClick={handlePrintModal}>\n                            <Printer />\n                            화면 인쇄\n                        </StyledButton> */}\n                    </div>\n                    {/* <StyledGroup>\n                        <StyledLabel htmlFor=\"createCategory\">Category</StyledLabel> */}\n                </StyledWelcomeRight>\n            </StyledWelcomeArea>\n            {/* <ModalPrint show={showPrintModal} onClose={handlePrintModal} topChartData={} /> */}\n            <ModalReport show={showReportModal} onClose={handleReportModal} />\n        </>\n    );\n};\n\nexport default WelcomeArea;\n","import cumulativeRevenueChart, { defaultCumulativeRevenueChart } from './chartOption/cumulativeRevenueChart';\nimport expenseRatioChart, { defaultExpenseRatioChart } from './chartOption/expenseRatioChart';\nimport expensesByCategoryChartChart, {\n    expensesByCategoryList,\n    getScore as getScoreExpensesByCategories,\n} from './chartOption/expensesByCategoryChart';\nimport { getTaxationData, getUserRowData } from '../utill/google';\nimport optionProfitAndLossChart, { defaultOptionProfitAndLossChart } from './chartOption/optionProfitAndLossChart';\nimport quarterlyRevenueChart, { defaultQuarterlyRevenueChart } from './chartOption/quarterlyRevenueChart';\nimport revenueByCategoryChartChart, {\n    getScore as getScoreRevenueByCategory,\n    revenueByCategoryList,\n} from './chartOption/revenueByCategoryChart';\nimport { useEffect, useRef, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport Content from '../layouts/content';\nimport Cookies from 'js-cookie';\nimport QuarterlyRevenueCumulativeRevenue from '../components/dashboard-two/quarterlyRevenueCumulativeRevenue';\nimport { Row } from '@doar/components';\nimport RowFour from '../containers/dashboard-one/row-four';\nimport RowOne from '../containers/dashboard-one/row-one/index';\nimport RowThree from '../containers/dashboard-one/row-three';\nimport RowThree2 from '../containers/dashboard-one/row-three2';\nimport RowTwo2 from '../containers/dashboard-one/row-two2';\nimport SEO from '../components/seo';\nimport TopChart from './chartOption/TopChart';\nimport WelcomeArea from '../containers/dashboard-one/welcome-area';\nimport moment from 'moment';\n\nconst DashboardOne = () => {\n    const navigate = useNavigate();\n    const [selectYear, setSelectYear] = useState<string>(moment().format('YYYY'));\n    const [optionQuarterlyRevenue, setOptionQuarterlyRevenue] = useState<any>(defaultQuarterlyRevenueChart);\n    const [optionCumulativeRevenue, setOptionCumulativeRevenue] = useState<any>(defaultCumulativeRevenueChart);\n    const [revenueByCategoryData, setRevenueByCategoryData] = useState<any>();\n    const [revenueByCategories, setRevenueByCategories] = useState<any>();\n    const [scoresRevenueByCategory, setScoresRevenueByCategory] = useState<any>();\n    const [scoresExpensesByCategories, setScoresExpensesByCategories] = useState<any>();\n    const [expensesByCategoryData, setExpensesByCategoryData] = useState<any>();\n    const [expensesByCategories, seteExpensesByCategories] = useState<any>();\n    const [optionProfitAndLoss, setOptionProfitAndLoss] = useState<any>(defaultOptionProfitAndLossChart);\n    const [optionExpenseRatioChart, setOptionExpenseRatioChart] = useState<any>(defaultExpenseRatioChart);\n    const [topChartData, setTopChartData] = useState<any>({\n        section1: {\n            amount: 0,\n            percent: 0,\n            time: '',\n        },\n        section2: {\n            amount: 0,\n            percent: 0,\n            time: '',\n        },\n        section3: {\n            amount: 0,\n            percent: 0,\n            time: '',\n        },\n        section4: {\n            amount: 0,\n            percent: 0,\n            time: '',\n        },\n    });\n    const [thList, setThList] = useState<any>([]);\n    const [trList, setTrList] = useState<any>([]);\n    const [token, setToken] = useState<any>(Cookies.get('CLUST_PARTNERS_TOKEN'));\n    useEffect(() => {\n        getData({ token });\n    }, [token]);\n    useEffect(() => {\n        const userInfo = Cookies.get('CLUST_PARTNERS_TOKEN');\n        if (userInfo) {\n            const userData = JSON.parse(userInfo);\n\n            if (userData?.data && moment(userData?.data).isSame(moment().format('YYYY-MM-DD'))) {\n                if (userData?.sheetUUID) {\n                    void getUserRowData({ token: userData?.sheetUUID });\n                }\n            } else {\n                alert('로그인 유효기간이 만료가 되었습니다.');\n                Cookies.remove('CLUST_PARTNERS_TOKEN');\n                navigate('/signin');\n            }\n        }\n\n        // void getUserRowData({ sheetId });\n    }, []);\n\n    const dataCopy = useRef<any>(null);\n\n    const [companyNm, setCompanyNm] = useState<string>('');\n\n    const getData = async ({ token }: { token: any }) => {\n        console.log(token);\n\n        const tokenItem = JSON.parse(token);\n        const retrunData = await getTaxationData({ token: tokenItem?.sheetUUID });\n\n        dataCopy.current = retrunData;\n        settingData(retrunData);\n    };\n\n    useEffect(() => {\n        settingSelectYearData();\n    }, [selectYear]);\n\n    const settingData = async (data: any) => {\n        if (data?.data?.companyNm) {\n            setCompanyNm(data?.data?.companyNm);\n        }\n\n        const topData = await TopChart({ data, selectYear: selectYear });\n        setTopChartData(topData);\n\n        const optionReturnQuarterlyRevenue = await quarterlyRevenueChart(data?.data?.quarterlyRevenue);\n        const optionReturnCumulativeRevenue = await cumulativeRevenueChart(data?.data?.cumulativeRevenue);\n        setOptionQuarterlyRevenue(optionReturnQuarterlyRevenue);\n        setOptionCumulativeRevenue(optionReturnCumulativeRevenue);\n        const revenueByCategory = await revenueByCategoryChartChart({\n            data: data?.data?.revenueByCategory,\n            selectYear,\n        });\n\n        setRevenueByCategoryData(revenueByCategory);\n        const revenueByCategoriesData = await revenueByCategoryList({\n            data: data?.data?.revenueByCategory,\n            selectYear,\n        });\n\n        setRevenueByCategories(revenueByCategoriesData);\n\n        const scoresDataRevenueByCategory = await getScoreRevenueByCategory({\n            data: data?.data?.revenueByCategory,\n            selectYear,\n        });\n        setScoresRevenueByCategory(scoresDataRevenueByCategory);\n\n        const expensesByCategory = await expensesByCategoryChartChart({\n            data: data?.data?.expensesByCategory,\n            selectYear,\n        });\n\n        setExpensesByCategoryData(expensesByCategory);\n        const expensesByCategoriesData = await expensesByCategoryList({\n            data: data?.data?.expensesByCategory,\n            selectYear,\n        });\n\n        seteExpensesByCategories(expensesByCategoriesData);\n\n        const scoresData = await getScoreExpensesByCategories({ data: data?.data?.expensesByCategory, selectYear });\n        setScoresExpensesByCategories(scoresData);\n\n        const optionReturnProfitAndLoss = await optionProfitAndLossChart(data?.data?.profitAndLoss);\n        const optionReturnExpenseRatioChart = await expenseRatioChart(data?.data?.expenseRatio);\n        setOptionProfitAndLoss(optionReturnProfitAndLoss);\n        setOptionExpenseRatioChart(optionReturnExpenseRatioChart);\n        if (data?.data?.cumulativeRevenue) {\n            const list = [];\n            for (const key in data?.data?.cumulativeRevenue) {\n                list.push(key);\n            }\n\n            setThList(list);\n            setTrList(data?.data?.cumulativeRevenue);\n        }\n    };\n    const settingSelectYearData = async () => {\n        if (dataCopy) {\n            const topData = await TopChart({ data: dataCopy.current, selectYear: selectYear });\n            console.log({ topData });\n            setTopChartData(topData);\n            const revenueByCategory = await revenueByCategoryChartChart({\n                data: dataCopy.current?.data?.revenueByCategory,\n                selectYear,\n            });\n\n            setRevenueByCategoryData(revenueByCategory);\n            const revenueByCategoriesData = await revenueByCategoryList({\n                data: dataCopy.current?.data?.revenueByCategory,\n                selectYear,\n            });\n\n            setRevenueByCategories(revenueByCategoriesData);\n\n            const scoresDataRevenueByCategory = await getScoreRevenueByCategory({\n                data: dataCopy.current?.data?.revenueByCategory,\n                selectYear,\n            });\n            setScoresRevenueByCategory(scoresDataRevenueByCategory);\n\n            const expensesByCategory = await expensesByCategoryChartChart({\n                data: dataCopy.current?.data?.expensesByCategory,\n                selectYear,\n            });\n\n            setExpensesByCategoryData(expensesByCategory);\n            const expensesByCategoriesData = await expensesByCategoryList({\n                data: dataCopy.current?.data?.expensesByCategory,\n                selectYear,\n            });\n\n            seteExpensesByCategories(expensesByCategoriesData);\n\n            const scoresData = await getScoreExpensesByCategories({\n                data: dataCopy.current?.data?.expensesByCategory,\n                selectYear,\n            });\n            setScoresExpensesByCategories(scoresData);\n        }\n    };\n    return (\n        <>\n            <SEO />\n            <Content>\n                <WelcomeArea\n                    selectYear={selectYear}\n                    setSelectYear={setSelectYear}\n                    companyNm={companyNm}\n                    topChartData={topChartData}\n                />\n                <Row gutters={10}>\n                    <RowOne topChartData={topChartData} />\n                    <QuarterlyRevenueCumulativeRevenue\n                        optionQuarterlyRevenue={optionQuarterlyRevenue}\n                        optionCumulativeRevenue={optionCumulativeRevenue}\n                    />\n                    <RowThree\n                        revenueByCategoryData={revenueByCategoryData}\n                        revenueByCategories={revenueByCategories}\n                        scores={scoresRevenueByCategory}\n                    />\n                    <RowThree2\n                        expensesByCategoryData={expensesByCategoryData}\n                        expensesByCategories={expensesByCategories}\n                        scores={scoresExpensesByCategories}\n                    />\n                    <RowFour\n                        optionProfitAndLoss={optionProfitAndLoss}\n                        optionExpenseRatioChart={optionExpenseRatioChart}\n                    />\n                    <RowTwo2 thList={thList} trList={trList} />\n                </Row>\n            </Content>\n        </>\n    );\n};\n\nexport default DashboardOne;\n","const randomizeArray = (arg: string[] | any[]) => {\n    const args = arg.slice();\n    let currentIndex = args.length;\n    let temporaryValue;\n    let randomIndex;\n\n    while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        temporaryValue = args[currentIndex];\n        args[currentIndex] = args[randomIndex];\n        args[randomIndex] = temporaryValue;\n    }\n\n    return args;\n};\n\nconst sparklineData = [47, 45, 54, 38, 56, 24, 65, 31, 37, 39, 62, 51, 35, 41, 35, 27, 93, 53, 61, 27, 54, 43, 19, 46];\n\nconst commonOptions = {\n    tooltip: {\n        enabled: false,\n    },\n    stroke: {\n        curve: 'straight',\n    },\n    fill: {\n        opacity: 1,\n    },\n    yaxis: {\n        show: false,\n    },\n    xaxis: {\n        show: false,\n    },\n    colors: ['#DCE6EC'],\n    title: {\n        text: undefined,\n    },\n    subtitle: {\n        text: undefined,\n    },\n};\n\nexport const conversionChart1 = {\n    options: {\n        chart: {\n            id: 'sparkline1',\n            sparkline: {\n                enabled: true,\n            },\n        },\n        ...commonOptions,\n        labels: [...Array(24).keys()].map(n => `2018-09-0${n + 1}`),\n    },\n    series: [\n        {\n            name: 'Conversions',\n            data: randomizeArray(sparklineData),\n        },\n    ],\n};\n\nexport const conversionChart2 = {\n    options: {\n        chart: {\n            id: 'sparkline2',\n            sparkline: {\n                enabled: true,\n            },\n        },\n        ...commonOptions,\n        labels: [...Array(24).keys()].map(n => `2018-09-0${n + 1}`),\n    },\n    series: [\n        {\n            name: 'Purchases',\n            data: randomizeArray(sparklineData),\n        },\n    ],\n};\n\nexport const conversionChart3 = {\n    options: {\n        chart: {\n            id: 'sparkline3',\n            sparkline: {\n                enabled: true,\n            },\n        },\n        ...commonOptions,\n        labels: [...Array(24).keys()].map(n => `2018-09-0${n + 1}`),\n    },\n    series: [\n        {\n            name: 'Values',\n            data: randomizeArray(sparklineData),\n        },\n    ],\n};\n\nexport const conversionChart4 = {\n    options: {\n        chart: {\n            id: 'sparkline4',\n            sparkline: {\n                enabled: true,\n            },\n        },\n        ...commonOptions,\n        labels: [...Array(24).keys()].map(n => `2018-09-0${n + 1}`),\n    },\n    series: [\n        {\n            name: 'Quantities',\n            data: randomizeArray(sparklineData),\n        },\n    ],\n};\n","import {\n    conversionChart1,\n    conversionChart2,\n    conversionChart3,\n    conversionChart4,\n} from \"./conversion-chart\";\n\nimport { IConversion } from \"../../types\";\n\nexport const conversions: IConversion[] = [\n    {\n        id: 1,\n        title: \"분기 대비 매출\",\n        rate: \"2,413,322\",\n        change: {\n            percentage: \"1.2%\",\n            growth: \"up\",\n            time: \"4분기\",\n        },\n        chart: conversionChart1,\n    },\n    {\n        id: 2,\n        title: \"연도 대비 매출\",\n        rate: \"2,413,322\",\n        change: {\n            percentage: \"0.7%\",\n            growth: \"down\",\n            time: \"2022년\",\n        },\n        chart: conversionChart2,\n    },\n    {\n        id: 3,\n        title: \"분기 대비 손익\",\n        rate: \"2,413,322\",\n        change: {\n            percentage: \"0.3%\",\n            growth: \"down\",\n            time: \"4분기\",\n        },\n        chart: conversionChart3,\n    },\n    {\n        id: 4,\n        title: \"연도 대비 손익\",\n        rate: \"2,413,322\",\n        change: {\n            percentage: \"2.1%\",\n            growth: \"up\",\n            time: \"2022\",\n        },\n        chart: conversionChart4,\n    },\n];\n","import { ISalesRevenue } from \"../../types\";\n\nexport const salesRevenues: ISalesRevenue[] = [\n    {\n        state: \"California\",\n        order: \"12,201\",\n        earning: \"$150,200.80\",\n    },\n    {\n        state: \"Texas\",\n        order: \"11,950\",\n        earning: \"$138,910.20\",\n    },\n    {\n        state: \"Wyoming\",\n        order: \"11,198\",\n        earning: \"$132,050.00\",\n    },\n    {\n        state: \"Florida\",\n        order: \"12,201\",\n        earning: \"$150,200.80\",\n    },\n    {\n        state: \"New York\",\n        order: \"8,560\",\n        earning: \"$117,087.50\",\n    },\n];\n","import { generateDayWiseTimeSeries } from \"../../methods\";\n\nexport const RevenueChart = {\n    series: [\n        {\n            name: \"Growth Actual\",\n            data: generateDayWiseTimeSeries(\n                new Date(\"11 Feb 2017 GMT\").getTime(),\n                20,\n                {\n                    min: 10,\n                    max: 60,\n                }\n            ),\n        },\n        {\n            name: \"Actual\",\n            data: generateDayWiseTimeSeries(\n                new Date(\"11 Feb 2017 GMT\").getTime(),\n                20,\n                {\n                    min: 10,\n                    max: 20,\n                }\n            ),\n        },\n        {\n            name: \"Plan\",\n            data: generateDayWiseTimeSeries(\n                new Date(\"11 Feb 2017 GMT\").getTime(),\n                20,\n                {\n                    min: 10,\n                    max: 15,\n                }\n            ),\n        },\n    ],\n    options: {\n        chart: {\n            type: \"area\",\n            stacked: true,\n            id: \"revenue-growth\",\n            zoom: {\n                enabled: false,\n            },\n            toolbar: {\n                show: false,\n            },\n        },\n        colors: [\"#69b2f8\", \"#00E396\", \"#d1e6fa\"],\n        dataLabels: {\n            enabled: false,\n        },\n        stroke: {\n            curve: \"smooth\",\n            width: 1,\n        },\n        fill: {\n            type: \"gradient\",\n            gradient: {\n                opacityFrom: 0.6,\n                opacityTo: 0.8,\n            },\n        },\n        legend: {\n            show: false,\n        },\n        xaxis: {\n            type: \"datetime\",\n            tooltip: {\n                enabled: false,\n            },\n            axisTicks: {\n                show: false,\n            },\n            labels: {\n                style: {\n                    fontSize: \"9px\",\n                    fontFamily:\n                        \"-apple-system, BlinkMacSystemFont, 'Inter UI', Roboto, sans-serif\",\n                },\n            },\n        },\n        yaxis: {\n            show: false,\n        },\n        grid: {\n            borderColor: \"#ffffff\",\n            xaxis: {\n                lines: {\n                    show: true,\n                },\n            },\n            yaxis: {\n                lines: {\n                    show: false,\n                },\n            },\n            column: {\n                colors: \"#ffffff\",\n                opacity: 1,\n            },\n        },\n        tooltip: {\n            enabled: false,\n        },\n        responsive: [\n            {\n                breakpoint: 575,\n                options: {\n                    chart: {\n                        height: 200,\n                    },\n                    xaxis: {\n                        show: false,\n                    },\n                },\n            },\n        ],\n    },\n};\n"],"names":["options","series","width","height","type","StyledSelect","styled","withConfig","shouldForwardProp","prop","defaultValidatorFn","allowedProps","includes","themeGet","selectIcon","InputStyles","$state","$showState","$showErrorOnly","SuccessInputStyles","WarningInputStyles","ErrorInputStyles","Select","forwardRef","ref","className","disabled","state","feedbackText","id","name","value","onChange","onBlur","onClick","children","showState","showErrorOnly","customStyle","restProps","classnames","$width","$height","$customStyle","displayName","defaultProps","show","onClose","color","cumulativeRevenueChart","data","key","hasOwnProperty","amountNumbers","map","amountString","parseInt","replace","item","push","Promise","all","returnData","chart","zoom","enabled","stacked","toolbar","dropShadow","top","left","blur","opacity","dataLabels","grid","row","colors","xaxis","categories","yaxis","tickAmount","forceNiceScale","labels","style","fontSize","formatter","toFixed","legend","position","horizontalAlign","onItemClick","toggleDataSeries","defaultCumulativeRevenueChart","expenseRatioChart","resultString","Number","defaultExpenseRatioChart","colorList","expensesByCategoryChartChart","selectYear","serieItems","categorieItems","valueItem","index","plotOptions","pie","donut","size","stroke","expensesByCategoryList","trList","tdList","getScore","scoreList","typeList","seriesWithIndeces","sort","a","b","indexList","scoreItem","defaultexpensesByCategoryChartChart","optionProfitAndLossChart","defaultOptionProfitAndLossChart","quarterlyRevenueChart","bar","horizontal","columnWidth","endingShape","axisBorder","axisTicks","fill","borderColor","lines","defaultQuarterlyRevenueChart","min","max","revenueByCategoryChartChart","revenueByCategoryList","defaultRevenueByCategoryChartChart","StyledHeader","props","device","StyledBody","StyledChart","optionQuarterlyRevenue","optionCumulativeRevenue","lg","mt","title","desc","descProps","m","ml","mr","mb","rest","space","display","layout","optionExpenseRatioChart","$status","css","optionProfitAndLoss","md","xl","StyledCardTitle","StyledCardBottom","StyledCardRate","StyledCardText","StyledChangePercent","$growth","rate","change","theme","useAppSelector","chartOptions","darkChartOptions","growth","percentage","time","topChartData","console","log","sm","section1","amount","toString","percent","conversionChart1","section2","conversionChart2","section4","conversionChart3","section3","conversionChart4","StyledMediaWrap","StyledMedaLeft","bg","colorStyles","StyledMediaTitle","StyledMediaSub","StyledTable","StyledTH","StyledTD","fontWeight","typography","_extends","Object","assign","target","i","arguments","length","source","prototype","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","BarChart2","_ref","_ref$color","_ref$size","React","xmlns","viewBox","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","propTypes","PropTypes","revenueByCategories","scores","py","tdListIndex","commonOptions","offsetX","offsetY","tooltip","df3data1","df3data2","df3data3","df3data4","df1","df3","df2","revenueByCategory","sessionsChart","useState","revenueByCategoryChart","setRevenueByCategoryChart","useEffect","getData","p","paddingBottom","Set","flatDeep","salesRevenues","sale","minHeight","revenueByCategoryData","mdOrder","xlOrder","expensesByCategories","expensesByCategory","expensesByCategoryChart","expensesByCategoryData","thList","values","tr","TopChart","quarterlyRevenue","keysArray","keyIndex","selectSection12Data","listLastYear","moment","format","listLastYearItem","selectSection2Data","sumSelectSection12Data","sumSelectSection2Data","increasevalue","percentageIncrease","profitAndLoss","StyledWelcomeArea","StyledWelcomeLeft","StyledWelcomeRight","setSelectYear","companyNm","yearList","setYearList","thisYear","lastYear","subtract","twoYearsAgo","showReportModal","setShowReportModal","prev","text","link","wcText","e","year","navigate","useNavigate","setOptionQuarterlyRevenue","setOptionCumulativeRevenue","setRevenueByCategoryData","setRevenueByCategories","scoresRevenueByCategory","setScoresRevenueByCategory","scoresExpensesByCategories","setScoresExpensesByCategories","setExpensesByCategoryData","seteExpensesByCategories","setOptionProfitAndLoss","setOptionExpenseRatioChart","setTopChartData","setThList","setTrList","Cookies","token","userInfo","userData","JSON","parse","isSame","sheetUUID","getUserRowData","alert","dataCopy","useRef","setCompanyNm","tokenItem","getTaxationData","retrunData","current","settingData","settingSelectYearData","topData","optionReturnQuarterlyRevenue","cumulativeRevenue","optionReturnCumulativeRevenue","revenueByCategoriesData","getScoreRevenueByCategory","scoresDataRevenueByCategory","expensesByCategoriesData","getScoreExpensesByCategories","scoresData","optionReturnProfitAndLoss","expenseRatio","optionReturnExpenseRatioChart","list","gutters","randomizeArray","arg","temporaryValue","randomIndex","args","slice","currentIndex","Math","floor","random","sparklineData","curve","undefined","subtitle","sparkline","Array","n","generateDayWiseTimeSeries","Date","getTime","order","earning"],"sourceRoot":""}